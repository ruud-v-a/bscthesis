%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Logo_LeidenUniv.pdf
%%Creator: Adobe Acrobat 9.4.6
%%For: pors
%%CreationDate: 11/7/2011, 1:47:47 PM
%%BoundingBox: 0 0 68 79
%%HiResBoundingBox: 0 0 68 79
%%CropBox: 0 0 68 79
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 627 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:CreationDate--Text="Mon Dec  3 16:05:40 2001"
   pdf:Producer="PStill 1.52 by F.Siegert frank@this.net"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">_LogoULsolo_eps_</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -79 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 79 li
68 79 li
68 0 li
cp
clp
[1 0 0 1 0 0 ]ct
15.1826 21.3628 mo
15.5645 21.2959 16.0454 21.2031 16.4497 21.0947 cv
16.4497 23.7827 li
16.4497 24.1182 16.46 24.1338 16.8623 24.1748 cv
16.8623 24.3745 li
15.2236 24.3745 li
15.2236 24.1748 li
15.6265 24.1338 15.6367 24.1182 15.6367 23.7827 cv
15.6367 21.8169 li
15.6367 21.6006 15.6162 21.5693 15.4507 21.5591 cv
15.1826 21.5434 li
15.1826 21.3628 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .72 0 .18 cmyk
f
50.1641 21.1567 mo
50.2207 21.2246 li
49.71 22.2559 49.2402 23.333 48.8071 24.374 cv
48.0693 24.436 li
48.0278 24.3535 li
48.5903 23.4985 49.127 22.6279 49.5859 21.7773 cv
48.5234 21.7773 li
48.1826 21.7773 48.1621 21.8032 48.0488 22.0971 cv
47.8164 22.0971 li
47.8833 21.6328 47.9141 21.3794 47.9453 21.1567 cv
50.1641 21.1567 li
cp
f
52.3994 21.1523 mo
52.2954 21.7485 li
50.9771 21.7485 li
50.8682 22.4438 li
51.0317 22.3652 51.2549 22.2964 51.458 22.2964 cv
52.1812 22.2964 52.5332 22.7637 52.5332 23.1899 cv
52.5332 23.522 52.3843 23.8442 52.0132 24.1172 cv
51.7607 24.3013 51.3984 24.4302 51.1211 24.4355 cv
50.8286 24.4355 50.541 24.3159 50.4365 24.2363 cv
50.3623 24.1816 50.3423 24.1021 50.3672 24.0127 cv
50.397 23.9087 50.4565 23.8197 50.5557 23.75 cv
50.6299 23.6958 50.6992 23.7007 50.7539 23.745 cv
50.873 23.8394 51.1704 24.1123 51.3936 24.1123 cv
51.6167 24.1123 51.7656 23.9238 51.7656 23.5073 cv
51.7656 23.0415 51.4927 22.7539 51.0615 22.7539 cv
50.8481 22.7539 50.6499 22.8184 50.5508 22.8428 cv
50.7637 21.1523 li
52.3994 21.1523 li
cp
f
19.374 21.1523 mo
19.27 21.7485 li
17.9517 21.7485 li
17.8428 22.4438 li
18.0063 22.3652 18.2295 22.2964 18.4326 22.2964 cv
19.1563 22.2964 19.5073 22.7637 19.5073 23.1899 cv
19.5073 23.522 19.3589 23.8442 18.9878 24.1172 cv
18.7354 24.3013 18.3735 24.4302 18.0957 24.4355 cv
17.8032 24.4355 17.5156 24.3159 17.4111 24.2363 cv
17.3369 24.1816 17.3169 24.1021 17.3418 24.0127 cv
17.3716 23.9087 17.4312 23.8197 17.5303 23.75 cv
17.6045 23.6958 17.6738 23.7007 17.7285 23.745 cv
17.8477 23.8394 18.145 24.1123 18.3682 24.1123 cv
18.5913 24.1123 18.7402 23.9238 18.7402 23.5073 cv
18.7402 23.0415 18.4673 22.7539 18.0361 22.7539 cv
17.8228 22.7539 17.6245 22.8184 17.5254 22.8428 cv
17.7383 21.1523 li
19.374 21.1523 li
cp
f
.4916 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
.6948 39.4897 mo
.6948 18.248 15.5298 1.0278 33.8291 1.0278 cv
52.1284 1.0278 66.9639 18.248 66.9639 39.4897 cv
66.9639 60.7314 52.1284 77.9516 33.8291 77.9516 cv
15.5298 77.9516 .6948 60.7314 .6948 39.4897 cv
cp
@
32.6719 16.1513 mo
32.7598 16.313 33.0181 16.3916 33.1826 16.3457 cv
33.4512 16.271 33.6221 16.0293 33.6509 15.9433 cv
33.4795 15.9395 33.4482 15.9355 33.2358 15.9678 cv
33.1206 15.9858 33.1362 16.0918 33.0034 16.0513 cv
32.8638 16.0083 32.8037 16.0693 32.6719 16.1513 cv
cp
f
32.7803 15.437 mo
32.6685 15.4468 32.5845 15.5605 32.6885 15.6372 cv
32.7603 15.6899 32.7578 15.5273 32.8965 15.6011 cv
32.9478 15.6289 33.0337 15.6372 33.0981 15.5815 cv
33.1631 15.5249 33.25 15.5215 33.3032 15.5415 cv
33.3809 15.5703 33.4434 15.3745 33.2793 15.3584 cv
33.2007 15.3505 33.1172 15.3672 33.0547 15.4175 cv
32.9712 15.4848 32.9917 15.4497 32.9121 15.4448 cv
32.8418 15.4408 32.8599 15.4296 32.7803 15.437 cv
cp
f
33.3374 14.3672 mo
33.3374 14.3672 li
33.3364 14.3687 li
33.3374 14.3677 33.3369 14.3677 33.3374 14.3672 cv
cp
f
34.1875 13.9253 mo
33.8174 13.9419 33.2373 14.1123 33.1543 14.2095 cv
33.1108 14.2603 33.1167 14.3363 33.167 14.3799 cv
33.2178 14.4233 33.2939 14.4175 33.3374 14.3672 cv
33.3408 14.3628 33.3003 14.3843 33.3999 14.3164 cv
33.3965 14.3359 33.3926 14.3555 33.395 14.3765 cv
33.4097 14.4979 33.52 14.5845 33.6416 14.5698 cv
33.7632 14.5547 33.8496 14.4447 33.8345 14.3228 cv
33.8262 14.2534 33.7847 14.1982 33.729 14.1641 cv
33.854 14.126 34.0063 14.0972 34.1938 14.0889 cv
34.2607 14.0859 34.3154 14.0601 34.312 13.9932 cv
34.3091 13.9268 34.2544 13.9229 34.1875 13.9253 cv
cp
f
32.7422 13.8617 mo
33.3237 13.5415 33.8638 13.2734 34.7236 13.2655 cv
35.4619 13.2588 35.5757 13.8071 35.5757 13.8071 cv
35.8306 13.5449 35.6787 12.8618 34.8008 12.8784 cv
33.5776 12.9019 33.0181 13.5116 32.7422 13.8617 cv
cp
f
33.7236 32.5459 mo
32.2563 32.3618 32.0996 31.4009 32.0923 30.9829 cv
32.0869 30.6401 32.4409 30.7974 31.8267 30.4697 cv
30.6318 29.833 29.71 30.2939 29.71 30.2939 cv
29.8638 30.4473 li
30.8472 30.4473 31.2661 30.8652 31.2661 30.8652 cv
31.0869 33.436 32.835 33.268 32.835 33.268 cv
33.124 33.7505 33.5815 33.9233 33.9976 33.9687 cv
34.1411 33.9198 34.3203 33.8623 34.5425 33.7969 cv
33.769 33.4892 33.7236 32.5459 33.7236 32.5459 cv
cp
ef
37.9702 32.9976 mo
37.9795 32.9585 38.6753 32.7822 38.6836 32.7422 cv
38.7598 32.3613 39.0342 32.1997 39.1782 32.1362 cv
39.2983 32.0825 39.3535 32.0244 39.3696 31.8965 cv
39.4175 31.5137 39.3887 31.4321 39.1143 31.0674 cv
38.3047 29.9907 38.2368 28.9619 38.189 28.8179 cv
38.1416 28.6758 38.0693 28.8423 38.0693 28.8423 cv
38.0693 28.8423 38.5239 31.1152 37.7104 31.2109 cv
37.7104 31.2109 37.834 32.3252 36.7056 32.5508 cv
36.5859 32.5747 36.5112 32.6465 36.5142 32.7422 cv
36.52 32.9307 36.3945 33.2036 36.3208 33.3481 cv
36.9526 33.2129 37.4956 33.1362 38.0371 33.1162 cv
38.0234 33.0811 38.0034 33.043 37.9702 32.9976 cv
cp
ef
38.0674 27.8564 mo
38.0371 27.7437 li
38.0371 27.7437 38.498 27.3442 39.1123 27.3442 cv
39.7266 27.3442 39.9541 27.4517 40.2798 27.8462 cv
40.4746 28.0815 40.5542 28.2979 40.4028 28.5116 cv
40.2285 28.7578 39.7471 28.522 39.7471 28.522 cv
39.5835 28.0405 li
39.5835 28.0405 39.397 27.7265 38.9077 27.7026 cv
38.4873 27.6821 38.2163 27.8286 38.0674 27.8564 cv
cp
f
26.8525 24.6094 mo
27.0679 24.7016 li
26.8525 25.1626 26.5508 25.9531 27.0063 26.5454 cv
27.3135 26.9448 28.0288 26.8872 28.4199 26.7603 cv
28.5464 26.7192 28.3145 27.4912 27.7437 28.2046 cv
27.0063 29.1265 26.146 28.9419 26.0845 27.1904 cv
26.0415 25.9609 26.2998 24.978 26.8525 24.6094 cv
cp
f
37.3711 53.1323 mo
36.6201 52.5703 35.729 51.7598 35.0752 50.7085 cv
33.3545 47.9429 33.1055 45.626 33.1206 39.2963 cv
33.1216 39.042 33.125 38.7983 33.1294 38.5596 cv
32.2041 38.4687 li
32.2041 38.4687 32.002 45.1123 32.002 45.8437 cv
32.002 46.8437 32.2832 47.7812 32.4395 45.9062 cv
32.5176 44.9697 32.2979 41.9687 32.5479 41.9687 cv
32.8916 41.9687 32.9707 53.2812 32.5957 53.2812 cv
31.8145 53.2812 31.627 53.0937 30.5142 53.1538 cv
30.0957 52.7187 29.0767 52.709 28.9165 52.8262 cv
28.8765 52.8555 29.2407 53.0303 29.6812 53.2275 cv
17.6655 56.3345 li
16.9336 55.8999 li
12.0029 57.9595 li
17.4731 57.4292 li
17.771 56.6029 li
29.9907 53.3642 li
30.5239 53.5981 31.0601 53.8241 31.0879 53.8506 cv
31.231 53.9854 32.7583 53.7402 32.7168 54.3398 cv
32.6948 54.6577 32.2725 54.9111 31.8301 55.0898 cv
31.4111 55.2583 30.8179 55.1045 30.8418 55.2021 cv
30.875 55.3369 31.8906 55.4751 32.2451 55.3203 cv
32.6196 55.1562 33.7822 54.7749 34.5293 54.0142 cv
34.5293 54.0142 37.1611 53.8301 37.5146 53.292 cv
37.5146 53.292 37.4604 53.2393 37.3711 53.1323 cv
cp
f
17.3457 56.5312 mo
13.9395 57.4687 li
17.1895 56.9687 li
17.3457 56.5312 li
cp
f
18.0986 36.0234 mo
18.0986 36.0234 19.6538 36.2539 19.7549 35.3945 cv
19.8032 34.9834 19.5479 34.8457 19.3252 34.8808 cv
19.126 34.9121 18.9536 35.0796 19.1367 35.3662 cv
19.2344 35.52 19.4302 35.8241 18.0986 36.0234 cv
cp
f
21.5435 41.3809 mo
21.4775 41.5054 21.3755 41.7168 21.208 41.4648 cv
20.9727 41.1118 19.8452 39.9766 19.8452 39.9766 cv
21.8369 39.9136 21.25 38.6557 21.25 38.6557 cv
21.145 38.7812 20.9565 38.9702 20.7046 39.0542 cv
20.064 39.2676 19.7192 38.8447 20.0127 38.6557 cv
21.1201 37.9443 21.8999 36.8315 21.8999 36.8315 cv
22.7383 36.9155 22.8433 36.4126 22.8433 36.4126 cv
22.6128 36.4751 22.1094 36.4331 22.1094 36.2656 cv
22.1094 36.0757 22.8223 35.7627 22.8223 35.7627 cv
22.6543 35.6157 21.9653 35.8145 21.9653 35.8145 cv
21.9443 35.7095 22.4448 35.1333 22.4448 35.1333 cv
22.0884 35.1333 21.6509 35.5 21.6509 35.5 cv
21.5459 35.269 21.7949 34.8398 21.7949 34.8398 cv
21.04 35.2173 21.208 36.2236 21.208 36.2236 cv
19.3838 37.7334 li
19.4468 37.0415 19.2163 36.748 19.2163 36.748 cv
18.5034 38.1104 17.6738 37.7764 17.4331 37.5669 cv
17.0078 37.1973 17.3037 36.9307 17.5493 36.8735 cv
17.7402 36.8291 17.9268 36.9263 18.0005 36.811 cv
18.1099 36.6392 18.0527 36.4019 17.9375 36.3496 cv
17.8008 36.2876 17.1182 36.5635 17.0024 36.5425 cv
16.8887 36.522 17.1504 35.7969 17.3306 35.7641 cv
18.0063 35.6411 18.0635 35.6895 18.0737 35.5737 cv
18.0957 35.3301 18.1299 35.1655 18.0107 35.123 cv
17.7402 35.0269 17.4941 34.8833 17.4941 34.8833 cv
17.1694 34.4746 17.0234 34.6172 16.7363 34.6172 cv
16.4976 34.6172 16.145 34.7773 15.9458 34.8296 cv
15.8525 34.854 15.7046 34.8716 15.6523 34.8188 cv
15.2173 34.3838 14.7505 34.8296 14.7505 34.8296 cv
14.9497 34.8086 15.2852 35.0708 15.1802 35.144 cv
14.9229 35.3242 15.1069 36.0771 15.1768 36.2866 cv
15.3799 36.8949 14.4224 37.5863 14.4224 37.5863 cv
14.9673 37.9219 15.5122 37.5166 15.5122 37.5166 cv
15.4565 38.1318 14.2964 38.4531 14.2964 38.4531 cv
14.6318 39.0679 15.666 38.9141 15.876 38.8721 cv
16.123 38.8228 16.0854 39.1519 15.75 39.2637 cv
14.9443 39.5322 13.8213 40.5215 13.8213 40.5215 cv
13.6064 40.5459 13.1719 40.5576 12.8047 40.2739 cv
12.6226 40.1338 12.6138 39.8374 12.6968 39.481 cv
12.793 39.0669 13.2979 38.3818 13.6665 37.8813 cv
13.79 37.7134 13.9067 37.5552 13.9937 37.4267 cv
14.0244 37.3818 14.7324 36.3213 14.3213 35.6318 cv
14.1567 35.3564 13.853 35.1553 13.4082 35.1504 cv
13.2993 35.1488 13.0083 35.1704 13.0083 35.1704 cv
12.4141 34.5967 11.8809 35.312 11.7178 35.9487 cv
11.5127 36.7476 11.8203 38.038 11.8203 38.038 cv
11.8203 38.038 11.6973 37.4438 12.4961 36.9521 cv
13.0024 36.6406 13.3564 36.0307 13.1514 35.6001 cv
13.1514 35.6001 13.3013 35.5747 13.4502 35.5771 cv
13.6772 35.581 13.8677 35.6899 13.9614 35.8467 cv
14.1646 36.1875 13.8765 36.8525 13.6465 37.1914 cv
13.564 37.313 13.4502 37.4683 13.3286 37.6328 cv
12.917 38.1919 12.4043 38.8882 12.2881 39.3857 cv
12.1719 39.8857 12.2417 40.2798 12.4956 40.5576 cv
12.8232 40.9165 13.3677 40.9619 13.6709 40.9561 cv
13.5869 41.1445 13.6816 41.3809 13.5137 41.4438 cv
13.2969 41.5254 12.7798 41.7168 12.7798 41.7168 cv
13.3672 42.1987 13.5137 42.8696 13.2412 43.1211 cv
12.9116 43.4258 12.4653 43.0376 12.4653 43.0376 cv
12.1089 45.0918 14.8975 46.1191 14.8135 46.245 cv
14.7227 46.3813 14.625 46.3501 14.499 46.5805 cv
14.2119 47.1074 14.7715 47.2305 14.7715 47.2305 cv
14.7295 46.874 14.9111 46.5269 15.0996 46.5058 cv
15.2881 46.4849 15.6313 47.2725 15.6313 47.2725 cv
15.7778 47.0625 15.6104 46.7061 15.6104 46.7061 cv
15.8198 46.6221 16.2183 47.1255 16.2183 47.1255 cv
16.3442 46.811 16.0435 46.4536 16.0435 46.4536 cv
16.3574 46.3486 16.7842 46.853 16.7842 46.853 cv
16.8052 45.8046 15.9668 45.7837 15.5474 45.7627 cv
14.4902 45.71 14.52 43.855 14.52 43.855 cv
15.2329 44.7563 16.0713 44.4419 16.0713 44.4419 cv
15.6943 44.2534 15.5264 43.897 15.5684 43.4985 cv
15.7144 42.1123 15.4424 41.9263 15.3374 41.7793 cv
15.2251 41.6221 15.5054 41.6958 15.5054 41.6958 cv
15.7148 42.3877 17.0776 43.3725 17.0776 43.3725 cv
16.8262 43.4355 16.4277 43.6245 16.4277 43.6245 cv
16.7422 44.6094 19.0908 44.8823 19.2373 44.9243 cv
19.7666 45.0752 19.4678 45.8467 19.4678 45.8467 cv
19.9712 45.7627 19.8872 45.3716 19.8872 45.3716 cv
20.4741 45.3573 20.4185 45.9726 20.4185 45.9726 cv
20.9077 45.7627 20.5298 45.3154 20.6699 45.2598 cv
20.9531 45.1465 21.2847 45.5811 21.2847 45.5811 cv
21.3965 45.0503 20.8936 44.5747 20.8936 44.5747 cv
21.0889 44.4351 21.5986 44.5352 21.5986 44.5352 cv
21.3052 43.6684 20.4321 44.2393 20.2646 44.3652 cv
20.1211 44.4726 20.0269 44.5747 19.8311 44.4072 cv
19.3511 43.995 18.6294 43.4565 18.6294 43.4565 cv
19.8242 43.4355 19.8242 42.7437 19.8242 42.7437 cv
19.2163 42.7437 18.9858 42.5762 18.8599 42.3877 cv
18.0464 41.167 16.8682 41.2134 16.6167 41.1924 cv
16.2764 41.1641 16.4907 40.9199 16.4907 40.9199 cv
17.4131 40.8359 18.189 40.4165 18.189 40.4165 cv
19.3418 41.6328 20.3271 41.8003 20.4111 41.8213 cv
20.5024 41.8442 20.6626 41.9053 20.6626 42.1567 cv
20.6626 42.6812 20.9146 42.8276 20.9146 42.8276 cv
20.9146 42.7227 20.9146 42.3457 21.313 42.3247 cv
21.7314 42.3027 21.8159 42.9326 21.8159 42.9326 cv
22.2354 42.7437 22.0254 42.0312 22.0254 42.0312 cv
22.3818 42.0518 22.6543 42.3877 22.6543 42.3877 cv
22.8433 41.9053 22.0703 41.6318 22.0703 41.6318 cv
22.2168 41.5268 22.8223 41.5488 22.8223 41.5488 cv
22.5078 40.9829 21.7319 41.0249 21.5435 41.3809 cv
cp
16.8228 35.2593 mo
16.8228 35.2119 16.8389 35.1704 16.8623 35.1353 cv
16.6484 35.123 li
16.5977 35.127 16.561 35.1225 16.5576 35.0723 cv
16.5537 35.0215 16.5879 35.0088 16.6382 35.0049 cv
17.2769 34.9775 li
17.3271 34.9736 17.3711 35.0112 17.375 35.062 cv
17.3789 35.1123 17.3408 35.1562 17.2905 35.1602 cv
17.1533 35.1523 li
17.1704 35.1841 17.1831 35.2192 17.1831 35.2593 cv
17.1831 35.3735 17.1025 35.4658 17.0029 35.4658 cv
16.9033 35.4658 16.8228 35.3735 16.8228 35.2593 cv
cp
f
54.2358 46.9551 mo
54.2173 47.0586 54.1982 47.1919 54.1079 47.2183 cv
53.9629 47.2616 53.9429 47.2725 53.8511 47.3433 cv
53.7339 47.4346 53.7578 47.474 53.9063 47.479 cv
54.1587 47.4873 54.4233 47.0888 54.4404 47.0151 cv
54.459 46.937 54.6719 46.8062 54.7622 46.7646 cv
54.8896 46.7061 54.7686 46.5718 54.7686 46.5718 cv
54.5332 46.519 li
54.5669 46.3183 54.5308 46.1831 54.46 46.0898 cv
54.7515 46.0854 55.2495 46.0463 55.4282 45.8398 cv
55.4873 45.7725 55.6509 45.6474 55.6343 45.5581 cv
55.6265 45.5185 55.5732 45.3589 55.4995 45.3154 cv
55.3174 45.209 54.894 45.1865 54.6357 45.2734 cv
54.1636 45.4326 53.9165 45.2475 53.8594 45.1768 cv
53.8345 45.146 53.8428 45.0835 53.8804 45.0005 cv
53.9648 45.0679 54.1934 45.0098 54.2988 44.9619 cv
54.4443 44.895 54.4707 44.7148 54.3232 44.6802 cv
53.9019 44.581 53.812 44.8379 53.812 44.8379 cv
53.6968 45.0297 53.6777 45.1689 53.7529 45.2627 cv
53.897 45.4414 54.3257 45.522 54.6777 45.4033 cv
54.936 45.3164 55.3076 45.3617 55.4307 45.4336 cv
55.4663 45.4546 55.4307 45.6157 55.4316 45.6221 cv
55.4414 45.6709 55.3564 45.7139 55.3252 45.751 cv
55.1592 45.9419 54.5293 45.9609 54.2754 45.9521 cv
53.9253 45.7988 53.4902 46.0557 53.3564 46.1528 cv
53.1602 46.2948 53.0225 46.3501 52.9204 46.3018 cv
52.7148 46.2055 53.1621 45.7451 53.2236 45.6729 cv
53.2993 45.5845 53.2739 45.5112 53.1533 45.5518 cv
52.7188 45.6982 52.6968 45.4321 52.6406 45.3413 cv
52.5669 45.2222 52.5527 45.2939 52.5059 45.3662 cv
52.4316 45.4814 52.603 46.0088 52.1992 46.0991 cv
51.4536 46.2661 51.2192 45.6206 51.2192 45.6206 cv
51.0991 45.6611 li
51.1772 45.9907 51.498 46.1796 51.5854 46.2271 cv
51.7783 46.332 51.7729 46.397 51.7852 46.4867 cv
51.9673 46.6616 li
51.9502 46.7207 51.812 47.0078 51.812 47.0078 cv
51.7925 47.1406 51.2881 47.5547 51.2881 47.5547 cv
51.1396 47.5498 50.8394 47.6436 50.8965 47.7197 cv
51.0688 47.9512 51.4604 47.7388 51.4604 47.7388 cv
51.4639 47.6348 52.1523 47.0488 52.2886 46.9643 cv
52.2886 46.9643 53.0273 46.7563 53.25 46.6694 cv
53.4541 46.5898 53.397 46.7041 53.397 46.7041 cv
53.2734 46.8486 52.9854 47.4629 52.9854 47.4629 cv
52.7759 47.5005 52.5332 47.6557 52.6196 47.7334 cv
52.8105 47.9032 53.1299 47.5869 53.1299 47.5869 cv
53.0879 47.5107 53.3188 47.2607 53.3188 47.2607 cv
53.6265 46.5849 li
53.9336 46.4468 li
53.9336 46.4468 53.9966 46.6816 54.1978 46.7798 cv
54.3989 46.8774 54.2358 46.9551 54.2358 46.9551 cv
cp
f
53.4419 34.6396 mo
53.4268 34.1479 li
53.8262 34.5781 li
54.1484 34.1943 li
54.21 34.6548 li
54.8091 34.3633 li
54.5635 34.8701 li
53.4419 34.6396 li
cp
f
46.5898 35.1016 mo
46.5898 35.1016 45.813 35.2168 45.7622 34.7871 cv
45.7378 34.5815 45.8657 34.5127 45.9771 34.5303 cv
46.0767 34.5459 46.1626 34.6299 46.0713 34.7734 cv
46.022 34.8501 45.9243 35.002 46.5898 35.1016 cv
cp
f
45.4404 34.3496 mo
45.4404 33.7046 li
45.1328 33.7046 li
45.1328 34.3496 li
45.4404 34.3496 li
cp
f
49.0659 34.4111 mo
49.0659 33.7661 li
48.7588 33.7661 li
48.7588 34.4111 li
49.0659 34.4111 li
cp
f
44.6372 36.876 mo
44.6372 36.231 li
44.3301 36.231 li
44.3301 36.876 li
44.6372 36.876 li
cp
f
44.3647 40.0957 mo
44.3647 39.4502 li
44.0576 39.4502 li
44.0576 40.0957 li
44.3647 40.0957 li
cp
f
46.6079 40.9097 mo
46.6079 40.2646 li
46.3008 40.2646 li
46.3008 40.9097 li
46.6079 40.9097 li
cp
f
39.105 40.8936 mo
39.0439 41.165 39.0088 41.7373 39.0088 41.7373 cv
38.7559 41.6704 38.2617 41.7637 38.2617 41.7637 cv
38.2979 40.3984 38.5869 40.3447 38.8281 40.3584 cv
39.1289 40.375 39.1411 40.7334 39.105 40.8936 cv
cp
ef
39.5649 35.143 mo
39.2573 35.126 39.0493 35.4062 38.9829 35.8437 cv
38.9097 36.3213 38.8618 36.7114 38.833 36.9648 cv
38.9185 36.9672 39.0005 36.9736 39.0723 36.9844 cv
39.1719 36.6851 39.3481 36.187 39.7637 35.7948 cv
39.7612 35.7744 39.752 35.7563 39.7549 35.7344 cv
39.8076 35.332 39.6782 35.1494 39.5649 35.143 cv
cp
ef
38.0859 37.0244 mo
38.1392 37.0127 38.2051 37.0024 38.2754 36.9937 cv
38.2739 36.7148 38.2988 36.2226 38.1787 35.7207 cv
38.0645 35.2446 37.854 35.0947 37.6714 35.0508 cv
37.5273 35.1948 37.3286 35.1309 37.1084 35.5033 cv
37.6084 36.0171 37.8823 36.626 38.0474 37.0308 cv
38.0615 37.0282 38.0693 37.0282 38.0859 37.0244 cv
cp
ef
41.6626 39.4429 mo
41.667 38.9414 41.6729 38.4414 41.6729 37.9473 cv
41.6108 38.1655 41.5386 38.3916 41.4438 38.6353 cv
41.5044 38.877 41.5767 39.147 41.6626 39.4429 cv
cp
ef
39.811 39.0083 mo
39.7974 39.2329 39.876 39.6299 39.9365 39.7422 cv
40.1104 40.064 39.7065 40.8604 39.5869 41.0947 cv
39.2256 41.8042 39.3584 42.2461 39.3584 42.4736 cv
39.3584 42.7705 38.8882 42.9419 38.4785 42.875 cv
36.5977 42.5679 37.8643 39.8896 37.8643 39.8896 cv
37.8159 39.8765 37.394 39.6758 37.1895 39.4883 cv
36.7798 39.1133 37.0308 38.8599 37.2134 38.23 cv
37.3066 37.9101 37.3564 37.5474 37.2261 37.1557 cv
37.2324 37.1547 li
37.0664 36.8046 36.8276 36.1435 36.3511 35.853 cv
36.1362 35.7217 35.6807 35.6357 35.4805 35.7983 cv
35.1528 36.0654 35.2134 36.8374 35.6313 37.8052 cv
35.7153 37.5327 35.792 37.2603 35.8447 36.9961 cv
36.0376 36.3789 36.6768 36.9443 36.6558 37.4492 cv
36.4663 38.3296 36.0469 39.2642 35.814 39.998 cv
35.2168 41.8794 36.2363 43.5479 36.7617 44.6274 cv
37.4502 46.0415 37.8384 49.2798 37.7002 49.75 cv
37.625 49.4858 36.6543 46.0962 36.1011 45.0269 cv
35.3735 43.62 34.2583 42.1742 35.0376 39.5732 cv
35.1016 39.3594 35.1875 39.1128 35.2788 38.8545 cv
34.2959 37.078 34.4551 35.6982 35.0903 35.1802 cv
35.4541 34.8843 36.0239 34.8838 36.4912 35.0669 cv
36.8706 34.2793 37.3701 34.1729 37.8535 34.289 cv
38.2227 34.377 38.4717 34.6611 38.6426 34.9795 cv
38.8242 34.7431 39.042 34.5244 39.2798 34.4121 cv
39.1191 34.3183 38.9819 34.208 38.9126 34.104 cv
38.8511 34.0117 38.853 33.9482 38.8882 33.8901 cv
37.8931 33.8013 36.9106 33.9468 36.1934 34.104 cv
34.5801 34.4574 33.9966 34.6875 33.9966 34.6875 cv
33.9966 34.6875 33.7109 36.23 33.7417 39.333 cv
33.7451 39.6968 33.7495 40.0415 33.7539 40.3765 cv
33.7671 41.373 33.7847 42.2461 33.813 43.0293 cv
33.9424 46.6294 34.2969 48.2251 35.4917 50.2915 cv
35.7607 50.7568 36.0635 51.1714 36.3735 51.5415 cv
37.3174 52.666 38.3306 53.3491 38.6816 53.5684 cv
38.6836 53.5693 38.686 53.5708 38.6875 53.5718 cv
38.7114 53.5864 38.7314 53.5986 38.7485 53.6089 cv
38.7539 53.6123 38.7593 53.6157 38.7637 53.6182 cv
38.7925 53.6353 38.8101 53.6455 38.8101 53.6455 cv
38.8101 53.6455 39.0928 53.4009 39.439 52.9453 cv
39.8105 52.4551 40.2559 51.7202 40.5103 50.7573 cv
41.1924 48.1772 41.4609 45.4702 41.5757 42.9404 cv
41.4185 43.4141 41.2451 43.8359 41.125 44.105 cv
40.8022 44.8271 40.1021 47.3423 39.7832 49.625 cv
39.5347 48.2421 40.0669 45.4687 40.4893 44.1655 cv
41.0166 42.5396 41.4111 41.6489 41.1689 40.3838 cv
41.0049 39.8393 li
40.5835 38.4414 40.3721 37.7397 40.1357 37.1968 cv
40.0386 36.9726 40.1411 36.7119 40.3652 36.6143 cv
40.5894 36.5171 40.8501 36.6196 40.9478 36.8437 cv
41.0181 37.0059 41.0747 37.1733 41.1265 37.3516 cv
41.2402 36.7549 41.1558 36.2715 40.9575 36.0386 cv
40.8521 35.9146 40.6499 35.9971 40.5151 36.0664 cv
39.6948 36.4878 39.5933 37.3945 39.5938 37.3936 cv
39.5869 37.4409 39.6152 37.6318 39.6152 37.6318 cv
40.1196 38.1523 39.9634 38.5864 39.8687 38.8037 cv
38.5439 44.9502 mo
38.1304 45.6113 38.3071 46.9136 38.4502 47.2915 cv
38.1963 46.8164 37.7354 46.0298 37.8989 45.2573 cv
37.9683 44.9281 38.1035 44.6167 38.2915 44.3193 cv
37.2681 43.8822 36.5669 43.5581 36.2393 42.6152 cv
35.9785 41.8623 36.1782 41.1401 36.0703 40.5796 cv
36.0498 40.3452 36.0576 40.0806 36.1011 39.9726 cv
36.2075 39.708 36.3901 39.3335 36.5005 39.5273 cv
36.9614 40.6484 36.6348 40.7929 36.8232 41.9546 cv
36.9893 42.9775 37.4243 43.208 38.5352 43.6953 cv
38.6016 43.7246 38.647 43.7588 38.7056 43.7896 cv
38.7642 43.7261 38.8174 43.6606 38.8818 43.5981 cv
39.3301 43.1659 39.6499 42.9834 39.9111 42.2461 cv
40.1333 41.6196 40.1108 40.7251 40.3413 39.957 cv
40.5405 39.2925 41.0732 40.1782 40.8789 40.9863 cv
40.6948 41.7544 40.6904 41.8139 40.4795 42.538 cv
40.2544 43.3105 39.7622 43.5327 39.1831 44.1318 cv
39.1831 44.1318 38.7007 44.6992 38.5439 44.9502 cv
cp
38.9653 44.7788 mo
38.9028 44.7319 39.3389 44.3311 39.3389 44.3311 cv
39.4429 44.4736 39.5288 44.6206 39.5859 44.7739 cv
39.8188 45.3955 39.6978 46.2266 39.2002 47.1665 cv
39.2002 47.1665 39.481 45.8105 39.1738 45.1035 cv
39.146 45.0396 39.1016 44.9736 39.0508 44.9087 cv
39.0508 44.9087 39.0493 44.8418 38.9653 44.7788 cv
cp
ef
41.4604 35.5835 mo
41.4858 35.6064 41.5054 35.6366 41.5283 35.6621 cv
41.5132 35.5679 41.5068 35.4658 41.4883 35.374 cv
41.4268 35.0659 41.1846 34.7441 40.8047 34.4829 cv
40.625 34.6118 40.3823 34.6328 40.1655 34.6362 cv
40.3184 34.8428 40.4019 35.125 40.4521 35.3955 cv
40.9541 35.248 41.3154 35.4541 41.4604 35.5835 cv
cp
ef
38.3892 39.0918 mo
38.3892 38.9902 38.3579 38.9009 38.3105 38.8457 cv
38.4194 38.793 38.521 38.7314 38.5996 38.6611 cv
38.6411 38.624 38.6475 38.5566 38.6138 38.5107 cv
38.5806 38.4644 38.5195 38.4575 38.4785 38.4946 cv
38.1885 38.7544 37.4937 38.8857 37.4868 38.8872 cv
37.4346 38.897 37.3989 38.9521 37.4077 39.0103 cv
37.4165 39.0688 37.4658 39.1079 37.5186 39.0986 cv
37.5356 39.0952 37.7715 39.0508 38.0337 38.9595 cv
38.0215 38.9995 38.0142 39.0439 38.0142 39.0918 cv
38.0142 39.2588 38.0981 39.3945 38.2017 39.3945 cv
38.3047 39.3945 38.3892 39.2588 38.3892 39.0918 cv
cp
ef
39.8687 38.8037 mo
39.4326 38.6992 39.0161 38.4951 39.0117 38.4931 cv
38.9629 38.4692 38.9063 38.4937 38.8843 38.5479 cv
38.8628 38.6015 38.8848 38.665 38.9336 38.689 cv
38.9419 38.6934 39.0444 38.7432 39.1968 38.8052 cv
39.1284 38.8418 39.0786 38.9424 39.0786 39.0645 cv
39.0786 39.2172 39.1553 39.3408 39.2495 39.3408 cv
39.3442 39.3408 39.4209 39.2172 39.4209 39.0645 cv
39.4209 38.9902 39.4023 38.9233 39.3726 38.8735 cv
39.5039 38.9219 39.6553 38.9697 39.811 39.0083 cv
ef
38.8281 40.3584 mo
38.5869 40.3447 38.2979 40.3984 38.2617 41.7637 cv
38.2617 41.7637 38.7559 41.6704 39.0088 41.7373 cv
39.0088 41.7373 39.0439 41.165 39.105 40.8936 cv
39.1411 40.7334 39.1289 40.375 38.8281 40.3584 cv
cp
ef
38.7549 39.7925 mo
38.6865 39.7759 38.7061 39.7671 38.6265 39.7607 cv
38.5146 39.752 38.4141 39.8613 38.5044 39.9634 cv
38.5664 40.0337 38.5898 39.8554 38.7148 39.9614 cv
38.7607 40 38.8438 40.0244 38.916 39.9751 cv
38.9893 39.9242 39.0752 39.9365 39.1245 39.9672 cv
39.1963 40.0127 39.2891 39.8096 39.1299 39.7627 cv
39.0537 39.7407 38.9692 39.7437 38.8999 39.7881 cv
38.8071 39.8472 38.8325 39.812 38.7549 39.7925 cv
cp
ef
21.0908 52.6465 mo
21.0967 52.6489 21.1025 52.6514 21.1089 52.6538 cv
21.1323 52.6538 li
21.1182 52.6538 21.104 52.6514 21.0908 52.6465 cv
cp
f
13.0479 52.6538 mo
13.0713 52.6538 li
13.0781 52.6514 13.0835 52.6489 13.0898 52.6465 cv
13.0762 52.6514 13.062 52.6538 13.0479 52.6538 cv
cp
f
55.332 58.75 mo
40.5742 58.75 li
40.5742 56.7466 li
40.5742 56.6216 li
40.4492 56.6216 li
27.167 56.6216 li
27.042 56.6216 li
27.042 56.7466 li
27.042 58.75 li
12.3242 58.75 li
16.4736 65.3857 22.7061 70.0439 29.8496 71.3218 cv
30.9634 72.1284 32.3311 72.6055 33.8081 72.6055 cv
35.2793 72.6055 36.6411 72.1323 37.7529 71.3315 cv
44.9189 70.0679 51.1724 65.4028 55.332 58.75 cv
cp
27.292 65.8398 mo
27.292 56.8716 li
40.3242 56.8716 li
40.3242 65.8398 li
40.3242 69.4326 37.4009 72.3555 33.8081 72.3555 cv
30.2153 72.3555 27.292 69.4326 27.292 65.8398 cv
cp
f
38.7549 67.436 mo
38.6147 67.4082 38.4849 67.3906 38.3638 67.3818 cv
38.3721 67.3677 38.3809 67.354 38.3896 67.3398 cv
38.5698 67.0517 38.7749 66.7255 38.8628 66.2095 cv
39.0146 65.3174 38.6265 64.6431 37.874 64.4917 cv
37.1548 64.3467 36.5942 64.7939 36.3408 65.2666 cv
34.1274 62.4209 li
35.4131 60.7676 li
35.4136 60.7686 li
37.6143 62.479 li
38.042 61.9287 li
36.9414 61.0732 li
37.3691 60.5234 li
38.4692 61.3783 li
39.3247 60.2782 li
38.7744 59.8506 li
38.3467 60.4009 li
37.7969 59.9731 li
38.2241 59.4229 li
37.6743 58.995 li
36.8188 60.0957 li
36.269 59.668 li
36.2686 59.6675 li
37.124 58.5674 li
36.6392 58.1904 li
33.7383 61.9204 li
30.8374 58.1904 li
30.3525 58.5674 li
31.208 59.6675 li
31.2075 59.668 li
30.6572 60.0957 li
29.8018 58.995 li
29.252 59.4229 li
29.6797 59.9731 li
29.1294 60.4009 li
28.7021 59.8506 li
28.1519 60.2782 li
29.0068 61.3783 li
30.1074 60.5234 li
30.5347 61.0732 li
29.4346 61.9287 li
29.8623 62.479 li
32.0625 60.7686 li
32.0635 60.7676 li
33.3491 62.4209 li
31.1357 65.2666 li
30.8823 64.7939 30.3213 64.3467 29.6025 64.4917 cv
28.8501 64.6431 28.4619 65.3174 28.6138 66.2095 cv
28.7017 66.7255 28.9063 67.0517 29.0869 67.3398 cv
29.0957 67.354 29.104 67.3677 29.1128 67.3818 cv
28.9917 67.3906 28.8618 67.4082 28.7212 67.436 cv
28.5547 67.4697 28.4468 67.6313 28.4805 67.7979 cv
28.5137 67.9643 28.6753 68.0723 28.8418 68.0386 cv
29.0645 67.9941 29.25 67.9819 29.4146 67.9902 cv
29.4644 68.1479 29.499 68.3305 29.5112 68.5571 cv
29.5205 68.7266 29.6655 68.8564 29.835 68.8472 cv
30.0044 68.8374 30.1343 68.6929 30.125 68.5234 cv
30.1172 68.3804 30.1016 68.2504 30.0801 68.1304 cv
30.0952 68.1357 30.1108 68.1406 30.1265 68.145 cv
30.4507 68.248 30.8179 68.3642 31.3394 68.3203 cv
32.2412 68.2441 32.7969 67.7002 32.7554 66.9336 cv
32.7158 66.2012 32.0854 65.749 31.6216 65.6431 cv
33.7383 62.9213 li
35.855 65.6431 li
35.3906 65.749 34.7607 66.2012 34.7212 66.9336 cv
34.6797 67.7002 35.2354 68.2441 36.1367 68.3203 cv
36.6582 68.3642 37.0259 68.248 37.3501 68.145 cv
37.3657 68.1406 37.3809 68.1357 37.3965 68.1304 cv
37.375 68.2504 37.3594 68.3804 37.3516 68.5234 cv
37.3423 68.6929 37.4717 68.8374 37.6411 68.8472 cv
37.811 68.8564 37.9556 68.7266 37.9653 68.5571 cv
37.9775 68.3305 38.0122 68.1479 38.0615 67.9902 cv
38.2266 67.9819 38.4116 67.9941 38.6343 68.0386 cv
38.8008 68.0723 38.9629 67.9643 38.9961 67.7979 cv
39.0293 67.6313 38.9214 67.4697 38.7549 67.436 cv
cp
32.1416 66.9668 mo
32.1743 67.5684 31.5552 67.6855 31.2876 67.708 cv
30.8877 67.7417 30.6211 67.6572 30.312 67.5596 cv
30.168 67.5137 29.9741 67.521 29.8057 67.4854 cv
29.729 67.3311 29.688 67.1416 29.6074 67.0137 cv
29.4355 66.7393 29.2871 66.502 29.2197 66.1064 cv
29.1748 65.8418 29.1333 65.2129 29.7236 65.0942 cv
30.4463 64.9487 30.8447 65.8418 30.8613 65.8799 cv
30.9155 65.9751 31.0122 66.0508 31.0962 66.062 cv
31.1802 66.0728 32.1021 66.2305 32.1416 66.9668 cv
cp
38.2568 66.1064 mo
38.1895 66.502 38.041 66.7393 37.8687 67.0137 cv
37.7886 67.1416 37.7476 67.3311 37.6709 67.4854 cv
37.502 67.521 37.3081 67.5137 37.1641 67.5596 cv
36.8555 67.6572 36.5889 67.7417 36.1885 67.708 cv
35.9209 67.6855 35.3018 67.5684 35.3345 66.9668 cv
35.3745 66.2305 36.2964 66.0728 36.3804 66.062 cv
36.4639 66.0508 36.561 65.9751 36.6147 65.8799 cv
36.6313 65.8418 37.0303 64.9487 37.7529 65.0942 cv
38.3428 65.2129 38.3018 65.8418 38.2568 66.1064 cv
cp
f
29.6499 75.8491 mo
29.6045 76.1172 29.5952 76.124 29.2637 76.0679 cv
28.8457 75.9971 28.5742 75.6836 28.6519 75.2261 cv
28.7759 74.4921 29.2837 74.4648 29.4966 74.5005 cv
29.6069 74.5195 29.7671 74.5791 29.854 74.6426 cv
29.6499 75.8491 li
cp
29.8994 74.374 mo
29.5093 74.1865 li
29.3833 74.165 29.2886 74.1488 29.1514 74.1421 cv
28.481 74.126 27.8921 74.3916 27.7803 75.0542 cv
27.6641 75.7402 28.1523 76.1636 28.9331 76.2959 cv
30.8813 76.6255 li
30.9189 76.4048 li
30.4668 76.2959 30.4248 76.2563 30.5234 75.6729 cv
30.8252 73.8896 li
30.9229 73.3139 30.9766 73.2827 31.4712 73.334 cv
31.5083 73.1133 li
29.5522 72.7817 li
29.5146 73.0029 li
30.0615 73.1279 30.1025 73.1753 30.0049 73.751 cv
29.8994 74.374 li
cp
f
24.8926 74.707 mo
24.8154 74.9175 24.7979 74.9194 24.4897 74.8066 cv
24.1143 74.6689 23.8638 74.3296 24.04 73.8491 cv
24.1362 73.5859 24.3091 73.3936 24.5659 73.3432 cv
24.7314 73.3101 24.9277 73.3564 25.0928 73.417 cv
25.333 73.5054 li
24.8926 74.707 li
cp
25.4214 73.2646 mo
25.3013 73.2207 li
25.0757 73.1382 25.0269 73.0859 24.9946 72.8949 cv
24.9438 72.6382 24.8838 72.1982 24.7915 71.8921 cv
24.688 71.5473 24.5537 71.2851 23.8882 71.0327 cv
23.5879 70.9224 li
23.4937 71.1094 li
23.6045 71.2012 23.7173 71.3363 23.7891 71.4648 cv
23.8491 71.5806 23.9341 71.7904 24.0176 72.1196 cv
24.0928 72.4028 24.2012 72.8516 24.2334 73.0425 cv
23.7705 73.0259 23.3535 73.188 23.1909 73.6313 cv
23.0698 73.9619 23.144 74.2705 23.3076 74.4751 cv
23.4785 74.6826 23.7476 74.8325 24.0928 74.959 cv
25.9707 75.6474 li
26.0479 75.4375 li
25.6079 75.2421 25.5742 75.1953 25.7778 74.6396 cv
26.4004 72.9419 li
26.6011 72.3936 26.6602 72.3726 27.1445 72.5161 cv
27.2217 72.3057 li
25.4341 71.6504 li
25.3569 71.8608 li
25.8115 72.0614 25.8428 72.1156 25.6416 72.6641 cv
25.4214 73.2646 li
cp
f
20.2559 72.0596 mo
20.2349 72.0474 li
20.4326 70.8452 li
21.2046 71.2998 li
20.2559 72.0596 li
cp
21.1465 69.5854 mo
19.582 68.6636 li
19.4683 68.8564 li
19.7412 69.0546 19.8711 69.1499 19.8066 69.6221 cv
19.3491 72.7788 li
19.6367 72.874 li
22.0806 71.0732 li
22.5415 70.7319 22.6738 70.791 22.9839 70.9272 cv
23.0972 70.7344 li
21.8496 69.9995 li
21.7358 70.1924 li
21.8867 70.2998 li
22.0674 70.4341 22.0762 70.5132 21.8921 70.6836 cv
21.7124 70.8471 21.5068 71.0229 21.4346 71.0825 cv
20.4902 70.5263 li
20.5684 70.0151 li
20.626 69.6499 20.6885 69.6221 20.8936 69.7148 cv
21.0327 69.7783 li
21.1465 69.5854 li
cp
f
16.7949 69.8745 mo
16.417 70.3306 16.4224 70.3867 16.7827 70.7168 cv
16.6396 70.8892 li
14.3975 69.0312 li
14.4883 68.9087 14.71 68.604 14.9453 68.2695 cv
15.1343 68.4053 li
14.9888 68.6689 14.9409 68.8267 14.9526 68.9507 cv
14.9619 69.0518 15.0566 69.2134 15.3525 69.4585 cv
15.5864 69.6523 li
15.7588 69.7954 15.7651 69.8008 15.8926 69.6465 cv
16.5767 68.8213 li
16.1704 68.4844 li
15.813 68.188 15.7803 68.2026 15.4707 68.4761 cv
15.292 68.3281 li
16.0527 67.4102 li
16.231 67.5581 li
16.02 67.9131 16.0171 67.9419 16.3745 68.2378 cv
16.7813 68.5747 li
17.2861 67.9648 li
17.4854 67.7246 17.5718 67.5576 17.5215 67.4429 cv
17.4707 67.3281 17.3516 67.2085 17.1362 67.0303 cv
16.9204 66.8516 16.7031 66.7129 16.5117 66.7305 cv
16.3711 66.7495 16.1797 66.8301 15.9551 66.9761 cv
15.7856 66.8042 li
15.9487 66.6699 16.4292 66.2782 16.5635 66.1919 cv
18.9595 68.1771 li
18.8169 68.3496 li
18.3774 68.0273 18.3208 68.0327 17.9434 68.4883 cv
16.7949 69.8745 li
cp
f
14.6035 65.8984 mo
14.8179 65.5396 14.9683 64.8384 14.6064 64.4434 cv
14.3691 64.1831 14.0313 64.1343 13.8013 64.3446 cv
13.5649 64.5604 13.5117 64.8696 13.6689 65.2788 cv
13.7554 65.4921 li
13.9326 65.959 14.0669 66.5083 13.6655 66.8755 cv
13.1812 67.3183 12.4922 67.2759 11.8716 66.5972 cv
11.6392 66.3433 11.4907 65.9912 11.4175 65.8633 cv
11.5552 65.6938 11.7402 65.4814 11.9976 65.1704 cv
12.1885 65.3315 li
11.9443 65.7285 11.8735 66.1724 12.1597 66.4854 cv
12.3755 66.7217 12.7031 66.7363 12.9219 66.5366 cv
13.1401 66.3369 13.1133 66.0469 12.9854 65.7412 cv
12.9038 65.5449 li
12.668 64.9906 12.5576 64.4194 13.0244 63.9814 cv
13.5439 63.5068 14.2847 63.6641 14.873 64.3076 cv
15.2344 64.7031 15.3354 65.1099 15.3623 65.2695 cv
15.3062 65.3857 15.0176 65.7583 14.7827 66.0703 cv
14.6035 65.8984 li
cp
f
11.6172 61.8437 mo
12.0879 61.498 12.0918 61.436 11.8237 61.0171 cv
12.0044 60.8847 li
13.1455 62.4385 li
12.9648 62.5713 li
12.6455 62.1904 12.585 62.1753 12.1143 62.521 cv
10.6567 63.5908 li
10.1797 63.9414 10.1821 63.9989 10.4497 64.4175 cv
10.2695 64.5503 li
9.1284 62.9961 li
9.3091 62.8638 li
9.6284 63.2446 9.6826 63.2642 10.1597 62.9141 cv
11.6172 61.8437 li
cp
f
8.0132 60.0937 mo
7.8804 60.1675 7.7891 60.2002 7.7456 60.188 cv
7.7021 60.1753 7.6411 60.0996 7.5166 59.876 cv
7.1084 59.1416 7.269 58.4937 8.1641 57.9956 cv
8.9746 57.5439 9.71 57.6474 10.1304 58.4023 cv
10.3169 58.7383 10.2363 58.8564 9.8379 59.0781 cv
8.0132 60.0937 li
cp
8.1396 61.5708 mo
8.3354 61.4619 li
8.1377 61.041 8.1426 60.9834 8.6597 60.6953 cv
10.2393 59.8159 li
10.7495 59.5317 10.8081 59.5542 11.085 59.9863 cv
11.2808 59.877 li
10.4438 58.3745 li
9.8135 57.2421 8.7891 56.5854 7.6006 57.2471 cv
7.1953 57.4727 6.9111 57.8506 6.8315 58.2334 cv
6.7188 58.7544 6.8906 59.3271 7.2139 59.9072 cv
8.1396 61.5708 li
cp
f
7.4751 54.2129 mo
8.0156 53.9912 8.0342 53.9316 7.8755 53.4604 cv
8.083 53.3755 li
8.8145 55.1597 li
8.6069 55.2446 li
8.3892 54.7979 8.334 54.7686 7.7939 54.9902 cv
6.1211 55.6758 li
5.5732 55.9004 5.562 55.957 5.7202 56.4282 cv
5.5132 56.5132 li
4.7817 54.729 li
4.9888 54.644 li
5.2065 55.0908 5.2544 55.123 5.8022 54.8989 cv
7.4751 54.2129 li
cp
f
3.7246 51.5464 mo
3.9399 51.4844 li
4.1055 51.9447 4.1572 51.9795 4.7261 51.8158 cv
5.6948 51.5371 li
6.5327 51.2954 6.9561 50.8574 6.7788 50.2422 cv
6.5864 49.5732 5.9497 49.4736 5.1348 49.7085 cv
4.7891 49.8081 li
4.2739 49.9565 4.0137 50.0645 3.8535 50.144 cv
3.6777 50.2279 3.6494 50.4194 3.7363 50.7773 cv
3.521 50.8394 li
3.0889 49.3403 li
3.3042 49.2783 li
3.396 49.5684 3.5273 49.7051 3.7207 49.6831 cv
3.8984 49.665 4.1763 49.6182 4.6914 49.4697 cv
5.0991 49.3525 li
5.6372 49.1973 6.1138 49.1768 6.4902 49.3848 cv
6.8071 49.56 7.0659 49.9097 7.2031 50.3867 cv
7.312 50.7632 7.3555 51.1753 7.2144 51.5239 cv
7.0791 51.8623 6.7344 52.1117 6.1196 52.2886 cv
4.9585 52.623 li
4.3896 52.7871 4.3623 52.8364 4.4736 53.3374 cv
4.2583 53.3994 li
3.7246 51.5464 li
cp
f
2.0811 42.8369 mo
2.3032 42.8071 li
2.4092 43.3579 2.437 43.3867 2.9741 43.2983 cv
4.8706 42.9961 li
5.4077 42.9082 5.4297 42.8891 5.3872 42.3301 cv
5.6089 42.3003 li
5.8711 44.2588 li
5.6489 44.2886 li
5.5439 43.7456 5.5161 43.7172 4.978 43.7973 cv
2.873 44.1113 li
2.876 44.1348 li
5.9116 45.0444 li
5.939 45.2505 li
3.4321 46.7803 li
3.4341 46.7963 li
4.6299 46.6846 li
5.3071 46.6187 5.4722 46.5884 5.6367 46.5503 cv
5.8408 46.5068 5.8999 46.3452 5.8716 45.9536 cv
6.0938 45.9238 li
6.293 47.415 li
6.0713 47.4443 li
6.0117 47.1216 5.9097 47.022 5.6973 47.002 cv
5.5254 46.9848 5.3252 46.9956 4.7803 47.0278 cv
3.5962 47.1055 li
2.9238 47.147 2.9224 47.1958 2.9639 47.7471 cv
2.7417 47.7769 li
2.5645 46.4526 li
4.7554 45.0297 li
2.2749 44.2881 li
2.0811 42.8369 li
cp
f
3.6323 39.4692 mo
4.1279 39.4595 4.5356 39.8437 4.5449 40.3237 cv
4.5542 40.8037 4.1621 41.2114 3.666 41.2207 cv
3.1782 41.2305 2.7627 40.8384 2.7534 40.3584 cv
2.7441 39.8784 3.144 39.4785 3.6323 39.4692 cv
cp
f
3.1182 36.4892 mo
3.1201 36.4648 li
4.2861 36.1128 li
4.2178 37.0063 li
3.1182 36.4892 li
cp
5.7319 36.1991 mo
5.8701 34.3887 li
5.647 34.3716 li
5.5894 34.7041 5.561 34.8623 5.1084 35.0127 cv
2.0732 35.9917 li
2.1143 36.292 li
4.8071 37.6933 li
5.3164 37.957 5.3218 38.1016 5.3359 38.4399 cv
5.5591 38.457 li
5.6694 37.0132 li
5.4463 36.9961 li
5.416 37.1782 li
5.375 37.3999 5.3076 37.4429 5.0742 37.3525 cv
4.8481 37.2632 4.5996 37.1557 4.5142 37.1172 cv
4.5977 36.0244 li
5.0913 35.8696 li
5.4443 35.7603 5.4971 35.8042 5.5039 36.0297 cv
5.5083 36.1826 li
5.7319 36.1991 li
cp
f
4.0728 30.3232 mo
3.355 30.3789 3.1006 30.7471 3.0151 31.2109 cv
2.8662 32.0215 3.415 32.578 4.2803 32.7368 cv
5.2876 32.9219 6.0166 32.4941 6.1528 31.7549 cv
6.248 31.2354 5.9897 30.8706 5.4385 30.4604 cv
5.4961 30.2354 li
5.8267 30.3853 6.2847 30.5913 6.4658 30.7139 cv
6.4746 30.8867 6.5068 31.4209 6.4155 31.917 cv
6.1484 33.3726 5.1484 33.856 4.2358 33.6885 cv
3.103 33.4804 2.5049 32.3945 2.7393 31.1196 cv
2.8433 30.5532 3.0425 30.1748 3.1045 30.0156 cv
3.4077 30.0469 3.6875 30.0737 4.0913 30.0907 cv
4.0728 30.3232 li
cp
f
4.7407 27.5127 mo
4.748 27.4897 li
5.9629 27.4004 li
5.7012 28.2573 li
4.7407 27.5127 li
cp
7.3545 27.8003 mo
7.8848 26.063 li
7.6704 25.998 li
7.542 26.31 7.48 26.458 7.0054 26.5059 cv
3.8291 26.7998 li
3.8042 27.1011 li
6.1265 29.0562 li
6.5664 29.4248 6.5396 29.5669 6.4795 29.9004 cv
6.6938 29.9658 li
7.1167 28.5805 li
6.9023 28.5151 li
6.8335 28.6865 li
6.7451 28.8936 6.6699 28.9209 6.4614 28.7822 cv
6.2603 28.6455 6.041 28.4867 5.9663 28.4302 cv
6.2861 27.3822 li
6.8013 27.3384 li
7.1699 27.3086 7.2119 27.3633 7.1694 27.5845 cv
7.1406 27.7349 li
7.3545 27.8003 li
cp
f
5.979 22.9858 mo
5.8403 22.9233 5.7593 22.8696 5.7432 22.8271 cv
5.7271 22.7847 5.752 22.6909 5.8574 22.4574 cv
6.2026 21.6914 6.8188 21.4341 7.7524 21.855 cv
8.5981 22.2363 8.9541 22.8877 8.5991 23.6753 cv
8.4409 24.0254 8.2979 24.0312 7.8823 23.8437 cv
5.979 22.9858 li
cp
4.8691 23.9687 mo
5.0732 24.0605 li
5.293 23.6509 5.3418 23.6201 5.8818 23.8633 cv
7.5298 24.6064 li
8.0625 24.8467 8.0791 24.9067 7.8979 25.3867 cv
8.1021 25.4785 li
8.8086 23.9106 li
9.3413 22.729 9.2568 21.5151 8.0171 20.956 cv
7.5938 20.7655 7.1211 20.7632 6.7661 20.9277 cv
6.2808 21.1475 5.9243 21.6274 5.6514 22.2329 cv
4.8691 23.9687 li
cp
f
8.0928 19.3276 mo
7.5864 19.021 7.5313 19.0347 7.2583 19.4399 cv
7.0664 19.3237 li
8.5742 16.8324 li
8.708 16.9043 9.0425 17.0781 9.4077 17.2622 cv
9.3013 17.4687 li
9.0195 17.3638 8.856 17.3398 8.7354 17.3691 cv
8.6362 17.3935 8.4907 17.5112 8.2915 17.8398 cv
8.1343 18.0996 li
8.0186 18.2915 8.0142 18.2983 8.1855 18.4019 cv
9.1025 18.957 li
9.376 18.5049 li
9.6162 18.1079 9.5972 18.0776 9.2813 17.812 cv
9.4014 17.6133 li
10.4209 18.2305 li
10.3008 18.4287 li
9.9189 18.2724 9.8896 18.2738 9.6499 18.6709 cv
9.3765 19.1226 li
10.0542 19.5327 li
10.3208 19.6938 10.499 19.7549 10.605 19.688 cv
10.7109 19.6211 10.8115 19.4858 10.9565 19.2461 cv
11.1016 19.0068 11.2065 18.771 11.1606 18.5845 cv
11.1211 18.4482 11.0137 18.271 10.8359 18.0703 cv
10.9805 17.877 li
11.1382 18.019 11.5962 18.4364 11.7012 18.5562 cv
10.0903 21.2187 li
9.8984 21.103 li
10.1528 20.6211 10.1392 20.5659 9.6328 20.2593 cv
8.0928 19.3276 li
cp
f
12.6895 11.5654 mo
12.8613 11.709 li
12.5269 12.1592 12.5249 12.1991 12.9526 12.5356 cv
14.457 13.7295 li
14.8853 14.0659 14.9136 14.0687 15.2974 13.6597 cv
15.4692 13.8031 li
14.2026 15.3198 li
14.0308 15.1763 li
14.3599 14.7324 14.3618 14.6924 13.9395 14.3496 cv
12.2852 13.0103 li
12.27 13.0288 li
13.6509 15.8809 li
13.5176 16.0405 li
10.6958 15.2261 li
10.6855 15.2388 li
11.5757 16.0444 li
12.082 16.499 12.2163 16.6006 12.3555 16.6958 cv
12.5254 16.8169 12.6841 16.7515 12.9541 16.4658 cv
13.126 16.6094 li
12.1621 17.7637 li
11.9897 17.6201 li
12.188 17.3584 12.1924 17.2158 12.063 17.0459 cv
11.96 16.9072 11.8169 16.7671 11.4248 16.3877 cv
10.5674 15.5674 li
10.082 15.0996 10.0454 15.1313 9.667 15.5346 cv
9.4951 15.3911 li
10.3511 14.3656 li
12.8804 15.0186 li
11.751 12.6895 li
12.6895 11.5654 li
cp
f
16.5073 11.7544 mo
16.8989 12.1875 16.9614 12.1851 17.3506 11.876 cv
17.501 12.0425 li
16.0703 13.335 li
15.9204 13.1689 li
16.2666 12.8125 16.2754 12.751 15.8838 12.3174 cv
14.6714 10.9761 li
14.2744 10.5371 14.2173 10.5454 13.8281 10.8545 cv
13.6777 10.688 li
15.1084 9.3955 li
15.2583 9.5615 li
14.9116 9.918 14.8975 9.9736 15.2949 10.4131 cv
16.5073 11.7544 li
cp
f
17.9282 8.4629 mo
17.9478 8.4491 li
18.9575 9.1304 li
18.2222 9.6421 li
17.9282 8.4629 li
cp
19.8042 10.3057 mo
21.2949 9.2686 li
21.167 9.0845 li
20.873 9.25 20.7324 9.3286 20.3301 9.0723 cv
17.6528 7.3389 li
17.4463 7.5601 li
18.062 10.5332 li
18.1797 11.0942 18.0708 11.1895 17.8179 11.4146 cv
17.9458 11.5981 li
19.1343 10.7715 li
19.0063 10.5874 li
18.8462 10.6797 li
18.6484 10.7876 18.5728 10.7627 18.4946 10.5244 cv
18.4214 10.293 18.3472 10.0327 18.3232 9.9419 cv
19.2231 9.3159 li
19.6548 9.6006 li
19.9629 9.8052 19.9619 9.874 19.792 10.0215 cv
19.6763 10.1216 li
19.8042 10.3057 li
cp
f
22.4858 6.4912 mo
22.7134 6.9316 22.5488 7.4668 22.1226 7.6875 cv
21.6963 7.9077 21.1572 7.7363 20.9297 7.2959 cv
20.7051 6.8623 20.8735 6.3159 21.2998 6.0957 cv
21.7261 5.875 22.2617 6.0576 22.4858 6.4912 cv
cp
f
24.5864 7.6621 mo
24.5137 7.4502 li
25.0181 7.2437 25.043 7.1929 24.8506 6.6328 cv
24.2666 4.9302 li
24.0747 4.3701 24.019 4.3555 23.5391 4.4863 cv
23.4668 4.2744 li
25.3281 3.6357 li
25.4009 3.8477 li
24.9043 4.0518 24.8691 4.0977 25.0615 4.6577 cv
25.6401 6.3452 li
25.7412 6.6401 25.8335 6.7861 25.9604 6.8104 cv
26.0874 6.8345 26.2285 6.8027 26.4404 6.73 cv
26.7354 6.6289 26.9116 6.5264 26.9761 6.3691 cv
27.0332 6.2393 27.0718 6.0312 27.0688 5.6772 cv
27.3037 5.6221 li
27.3491 5.9023 27.4224 6.4609 27.4468 6.6812 cv
24.5864 7.6621 li
cp
f
29.1777 2.6924 mo
29.2144 2.9131 li
28.7383 3.0254 28.6978 3.0723 28.7949 3.6562 cv
28.9609 4.6509 li
29.1045 5.5107 29.4912 5.9814 30.1226 5.876 cv
30.8091 5.7617 30.9814 5.1406 30.8418 4.3042 cv
30.7827 3.9491 li
30.6943 3.4204 30.6167 3.1494 30.5562 2.9814 cv
30.4927 2.7974 30.3062 2.7471 29.9404 2.792 cv
29.9033 2.5713 li
31.4424 2.3145 li
31.479 2.5352 li
31.1807 2.5933 31.0293 2.7075 31.0293 2.9023 cv
31.0269 3.0811 31.0415 3.3628 31.1299 3.8911 cv
31.1992 4.3096 li
31.2915 4.8617 31.2578 5.3379 31.0078 5.688 cv
30.7974 5.9823 30.4199 6.1997 29.9307 6.2812 cv
29.5439 6.3457 29.1299 6.3418 28.7998 6.1621 cv
28.4785 5.9883 28.2705 5.6177 28.1655 4.9863 cv
27.9663 3.7949 li
27.8691 3.2109 27.8228 3.1777 27.3125 3.2305 cv
27.2759 3.0098 li
29.1777 2.6924 li
cp
f
35.8022 3.4277 mo
35.6572 2.6963 35.1729 2.5107 34.6929 2.5005 cv
34.021 2.4868 33.4434 2.9551 33.4219 4.0029 cv
33.4048 4.8345 33.7959 5.667 34.7476 5.6864 cv
34.9155 5.6899 35.1563 5.6547 35.1626 5.3428 cv
35.1724 4.8789 li
35.1797 4.5112 35.1567 4.4707 34.5098 4.4175 cv
34.5142 4.1934 li
36.3696 4.2314 li
36.3652 4.4551 li
36.0605 4.4893 36.02 4.5044 36.0122 4.896 cv
36.0044 5.2803 li
36 5.48 36.0127 5.6562 36.042 5.7769 cv
35.6484 5.8647 35.1738 5.9834 34.686 5.9731 cv
33.3423 5.9458 32.4536 5.1914 32.4761 4.0874 cv
32.502 2.832 33.5952 2.1899 34.811 2.2148 cv
35.3306 2.2255 35.7681 2.3545 35.9673 2.4067 cv
35.9873 2.5913 36.0049 2.9116 36.0425 3.4165 cv
35.8022 3.4277 li
cp
f
39.0796 3.4111 mo
39.1128 3.2627 39.1494 3.1729 39.1875 3.1484 cv
39.2256 3.124 39.3228 3.1294 39.5728 3.1851 cv
40.3926 3.3682 40.7695 3.9194 40.5469 4.9189 cv
40.3447 5.8247 39.7783 6.3047 38.9355 6.1167 cv
38.5605 6.0332 38.5259 5.894 38.625 5.4491 cv
39.0796 3.4111 li
cp
37.8926 2.5234 mo
37.8438 2.7422 li
38.2896 2.8745 38.3296 2.916 38.2007 3.4937 cv
37.8071 5.2583 li
37.6797 5.8286 37.6245 5.8569 37.1177 5.7769 cv
37.0688 5.9956 li
38.7476 6.3696 li
40.0127 6.6523 41.1841 6.3232 41.4805 4.9956 cv
41.5811 4.543 41.4878 4.0796 41.2549 3.7651 cv
40.9409 3.3345 40.3989 3.0825 39.751 2.938 cv
37.8926 2.5234 li
cp
f
44.7144 4.5254 mo
44.626 4.731 li
44.165 4.5679 44.105 4.5854 43.8711 5.1294 cv
43.4731 6.0557 li
43.1289 6.8564 43.1997 7.4619 43.7881 7.7148 cv
44.4272 7.9893 44.9077 7.5601 45.2427 6.7812 cv
45.3848 6.4502 li
45.5962 5.958 45.6777 5.688 45.7178 5.5137 cv
45.7642 5.3247 45.6338 5.1816 45.3022 5.0215 cv
45.3906 4.8159 li
46.8237 5.4316 li
46.7354 5.6372 li
46.4531 5.5249 46.2637 5.5391 46.1587 5.7031 cv
46.0596 5.8521 45.9199 6.0967 45.708 6.5894 cv
45.541 6.9784 li
45.3198 7.4932 45.0337 7.8755 44.6343 8.0347 cv
44.2979 8.1689 43.8633 8.1474 43.4072 7.9517 cv
43.0474 7.7969 42.7007 7.5698 42.5205 7.2396 cv
42.3442 6.9198 42.3701 6.4956 42.6226 5.9077 cv
43.0996 4.7979 li
43.333 4.2539 43.312 4.2012 42.8545 3.9697 cv
42.9429 3.7642 li
44.7144 4.5254 li
cp
f
48.9224 11.0527 mo
48.6025 10.8403 li
48.1138 7.3262 li
48.1074 7.3218 li
47.5137 8.2148 li
47.1948 8.6943 47.0601 8.9409 46.9868 9.0937 cv
46.9004 9.2671 46.9985 9.438 47.3228 9.6729 cv
47.1987 9.8594 li
45.8794 8.9823 li
46.0034 8.7959 li
46.2881 8.9751 46.481 8.9883 46.6138 8.8462 cv
46.7266 8.7192 46.9019 8.4995 47.2207 8.0195 cv
47.7788 7.1802 li
48.1328 6.6475 48.0928 6.4766 47.6572 6.1489 cv
47.7813 5.9619 li
48.814 6.6484 li
49.2979 9.8232 li
49.311 9.832 li
49.7715 9.1391 li
50.0903 8.6592 50.2256 8.4126 50.3027 8.2529 cv
50.3823 8.0752 50.2803 7.9111 49.9561 7.6768 cv
50.0801 7.4897 li
51.4058 8.3711 li
51.2817 8.5575 li
50.9976 8.3784 50.8091 8.3588 50.6758 8.501 cv
50.5586 8.6343 50.3838 8.854 50.0645 9.334 cv
48.9224 11.0527 li
cp
f
51.8076 10.958 mo
52.4478 10.2754 53.1582 10.1846 53.5435 10.5454 cv
54.0684 11.038 53.769 11.9307 53.1836 12.5552 cv
52.4561 13.3311 51.8325 13.3062 51.459 12.9561 cv
50.9688 12.4966 51.1401 11.6704 51.8076 10.958 cv
cp
53.7925 10.3848 mo
53.1099 9.7446 51.9014 9.478 50.9932 10.4468 cv
50.4077 11.0713 50.2524 12.2197 51.2212 13.1279 cv
51.9624 13.8228 53.1284 13.9941 53.9927 13.0723 cv
54.6821 12.3369 54.6797 11.2163 53.7925 10.3848 cv
cp
f
56.0581 15.3794 mo
55.6753 15.6943 55.1172 15.6465 54.812 15.2759 cv
54.5068 14.9053 54.5615 14.3423 54.9443 14.0269 cv
55.3208 13.7168 55.8901 13.7661 56.1953 14.1367 cv
56.5005 14.5068 56.4351 15.0688 56.0581 15.3794 cv
cp
f
58.3799 16.6768 mo
58.54 16.5708 58.562 16.5752 58.7344 16.8354 cv
58.9199 17.1157 58.9604 17.5107 58.6201 17.7358 cv
58.2134 18.0049 57.8896 17.8066 57.687 17.4995 cv
57.519 17.2461 li
58.3799 16.6768 li
cp
56.0991 17.2163 mo
55.6123 17.5386 55.5522 17.521 55.2476 17.1181 cv
55.0605 17.2417 li
56.0581 18.7495 li
56.46 19.3564 57.1167 20.0161 57.8174 19.5522 cv
58.2842 19.2432 58.2861 18.6953 58.0439 18.2129 cv
58.0571 18.2041 li
58.2852 18.418 58.7388 18.6836 59.1323 18.4233 cv
59.6196 18.1011 59.5547 17.5684 59.1621 16.9746 cv
58.0542 15.2998 li
57.8672 15.4233 li
58.1011 15.8345 58.1011 15.8921 57.6138 16.2148 cv
56.0991 17.2163 li
cp
57.4336 17.6094 mo
57.707 18.0234 57.7656 18.5029 57.2915 18.8158 cv
56.8916 19.081 56.5083 18.9219 56.3184 18.6353 cv
56.1504 18.3818 56.1113 18.1772 56.5586 17.8818 cv
57.2925 17.396 li
57.4336 17.6094 li
cp
f
60.3662 21.0435 mo
60.377 21.0649 li
59.5542 21.9638 li
59.1563 21.1611 li
60.3662 21.0435 li
cp
58.2676 22.6284 mo
59.0742 24.2554 li
59.2749 24.1558 li
59.1543 23.8408 59.0977 23.6899 59.4102 23.3296 cv
61.5186 20.9365 li
61.3296 20.6997 li
58.2988 20.8716 li
57.7261 20.9053 57.6479 20.7837 57.4629 20.5 cv
57.2622 20.5996 li
57.9053 21.897 li
58.106 21.7974 li
58.0386 21.6255 li
57.9604 21.4141 57.9966 21.3428 58.2437 21.3008 cv
58.4834 21.2622 58.752 21.2275 58.8452 21.2168 cv
59.3315 22.1992 li
58.9868 22.584 li
58.7393 22.8589 58.6709 22.8477 58.5503 22.6577 cv
58.4683 22.5288 li
58.2676 22.6284 li
cp
f
60.6411 25.9932 mo
60.0938 26.1968 60.0732 26.2554 60.2383 26.7915 cv
60.0283 26.8696 li
59.3203 24.9648 li
59.5303 24.8867 li
59.7471 25.3779 59.8013 25.4092 60.3486 25.2061 cv
62.606 24.3672 li
62.542 24.1947 li
62.3774 23.752 62.2544 23.6274 62.1338 23.578 cv
62.0337 23.5386 61.8735 23.5215 61.5635 23.5596 cv
61.4854 23.3496 li
61.9063 23.2187 62.2876 23.1201 62.5527 23.0298 cv
62.5977 23.1499 li
62.5156 23.2744 62.5229 23.3398 62.5898 23.5195 cv
63.4561 25.8521 li
63.5234 26.0317 63.5645 26.0508 63.6924 26.0972 cv
63.7368 26.2168 li
63.4746 26.3145 63.0161 26.5273 62.7349 26.6659 cv
62.6387 26.4541 li
62.9243 26.2803 63.0366 26.1699 63.0884 26.0566 cv
63.1499 25.9229 63.1128 25.7319 63.0073 25.4468 cv
62.8984 25.1543 li
60.6411 25.9932 li
cp
f
63.269 28.7138 mo
63.2749 28.7373 li
62.2852 29.4468 li
62.061 28.5796 li
63.269 28.7138 li
cp
60.8887 29.832 mo
61.3423 31.5903 li
61.5591 31.5342 li
61.5063 31.2012 61.4819 31.042 61.8618 30.7539 cv
64.4189 28.8471 li
64.2827 28.5762 li
61.2817 28.1196 li
60.7144 28.0347 60.6631 27.8989 60.54 27.5835 cv
60.3232 27.6396 li
60.6851 29.042 li
60.9019 28.9858 li
60.8716 28.8037 li
60.8389 28.5805 60.8887 28.5186 61.1392 28.5283 cv
61.3818 28.54 61.6514 28.561 61.7446 28.5703 cv
62.0186 29.6313 li
61.6016 29.937 li
61.3027 30.1548 61.2383 30.1299 61.1592 29.9189 cv
61.1055 29.7759 li
60.8887 29.832 li
cp
f
61.4946 33.0307 mo
64.1885 31.3301 li
64.5415 31.1035 64.5781 30.9761 64.5518 30.6079 cv
64.7729 30.5728 li
65.0625 32.3896 li
64.8413 32.4248 li
64.7861 32.2314 li
64.7271 32.0137 64.6387 32.0195 64.4038 32.1704 cv
62.6294 33.2876 li
63.0425 33.3916 64.3301 33.6406 64.6147 33.7002 cv
64.9077 33.7593 65 33.728 64.9878 33.4468 cv
64.9795 33.2939 li
65.2007 33.2588 li
65.4321 34.7124 li
65.2109 34.7475 li
65.1074 34.3511 64.9907 34.2808 64.4595 34.0977 cv
64.314 34.0479 62.7202 33.605 61.5425 33.331 cv
61.4946 33.0307 li
cp
f
64.543 36.3423 mo
64.5449 36.3662 li
63.4409 36.8818 li
63.3809 35.9878 li
64.543 36.3423 li
cp
61.998 37.0033 mo
62.1201 38.8154 li
62.3438 38.8003 li
62.353 38.4629 62.3584 38.3018 62.7847 38.0888 cv
65.6489 36.6846 li
65.5649 36.3936 li
62.6992 35.3926 li
62.1572 35.2046 62.1313 35.062 62.0688 34.7295 cv
61.8452 34.7446 li
61.9429 36.1895 li
62.1665 36.1742 li
62.1699 35.9893 li
62.1787 35.7646 62.2393 35.7124 62.4839 35.7681 cv
62.7202 35.8241 62.9814 35.8945 63.0713 35.9204 cv
63.1455 37.0142 li
62.6792 37.2378 li
62.3452 37.397 62.2866 37.3608 62.2476 37.1387 cv
62.2212 36.9883 li
61.998 37.0033 li
cp
f
64.0044 41.2549 mo
63.5083 41.2446 63.1167 40.8447 63.126 40.3647 cv
63.1357 39.8847 63.5439 39.4932 64.04 39.5029 cv
64.5278 39.5127 64.9277 39.9209 64.918 40.4009 cv
64.9082 40.8808 64.4922 41.2646 64.0044 41.2549 cv
cp
f
62.0059 42.3271 mo
62.2285 42.3511 li
62.2021 42.8955 62.2378 42.9395 62.8267 43.0024 cv
64.6162 43.1948 li
65.2051 43.2578 65.2417 43.2134 65.3267 42.7236 cv
65.5493 42.7476 li
65.3394 44.7041 li
65.1167 44.6802 li
65.1421 44.144 65.1152 44.0928 64.5269 44.0298 cv
62.7529 43.8398 li
62.4424 43.8062 62.2715 43.828 62.1958 43.9326 cv
62.1201 44.0371 62.0889 44.1787 62.0649 44.4014 cv
62.0317 44.7113 62.0503 44.9146 62.1655 45.04 cv
62.2588 45.1465 62.4307 45.2695 62.7529 45.4165 cv
62.7031 45.6523 li
62.4302 45.5752 61.8931 45.4047 61.6836 45.334 cv
62.0059 42.3271 li
cp
f
61.9868 48.3887 mo
61.4155 48.2676 61.3667 48.3062 61.2324 48.7847 cv
61.0132 48.7383 li
61.4136 46.8521 li
61.6328 46.8984 li
61.561 47.3905 61.5903 47.4458 62.1616 47.5669 cv
63.9302 47.9429 li
64.5093 48.0658 64.5503 48.0254 64.6846 47.5469 cv
64.9038 47.5933 li
64.5034 49.4795 li
64.2842 49.4325 li
64.356 48.9409 64.3345 48.8872 63.7559 48.7646 cv
61.9868 48.3887 li
cp
f
63.083 52.6963 mo
63.2651 52.7573 63.2749 52.7778 63.1753 53.0732 cv
63.0674 53.3916 62.7808 53.6665 62.394 53.5356 cv
61.9316 53.3794 61.8901 53.0024 62.0083 52.6538 cv
62.1055 52.3657 li
63.083 52.6963 li
cp
61.2578 51.2261 mo
60.7041 51.0391 60.6816 50.9809 60.813 50.4931 cv
60.6006 50.4214 li
60.022 52.1343 li
59.7886 52.8242 59.6709 53.7471 60.4668 54.0161 cv
60.9976 54.1953 61.4316 53.8604 61.6636 53.373 cv
61.6787 53.3784 li
61.6494 53.6895 61.7183 54.2109 62.1655 54.3617 cv
62.7188 54.5488 63.0996 54.1709 63.3276 53.4966 cv
63.9707 51.5942 li
63.7583 51.5225 li
63.5771 51.9595 63.5313 51.9946 62.978 51.8076 cv
61.2578 51.2261 li
cp
61.7656 52.521 mo
61.6069 52.9912 61.2642 53.3311 60.7261 53.1494 cv
60.271 52.9956 60.1616 52.5952 60.2715 52.2695 cv
60.3691 51.9814 60.5063 51.8252 61.0142 51.9966 cv
61.8477 52.2783 li
61.7656 52.521 li
cp
f
60.9648 57.0205 mo
61.4941 57.2852 61.5479 57.2676 61.7876 56.8418 cv
61.9878 56.9419 li
60.6851 59.5463 li
60.5454 59.4854 60.1987 59.3389 59.8193 59.1851 cv
59.9087 58.9702 li
60.1987 59.0527 60.3633 59.0635 60.4814 59.0239 cv
60.5781 58.9917 60.7139 58.8633 60.8857 58.5195 cv
61.0215 58.248 li
61.1221 58.0473 61.1255 58.0405 60.9468 57.9507 cv
59.9878 57.4712 li
59.752 57.9433 li
59.5439 58.3584 59.5654 58.3872 59.9019 58.627 cv
59.7979 58.8345 li
58.7319 58.3008 li
58.8359 58.0937 li
59.2295 58.2187 59.2578 58.2153 59.4653 57.8003 cv
59.7017 57.328 li
58.9932 56.9736 li
58.7144 56.834 58.5317 56.7876 58.4316 56.8628 cv
58.3315 56.938 58.2422 57.0811 58.1167 57.331 cv
57.9917 57.5815 57.9058 57.8252 57.9663 58.0073 cv
58.0166 58.1396 58.1382 58.3081 58.3311 58.4941 cv
58.2021 58.6982 li
58.0342 58.5693 57.5439 58.1899 57.4297 58.0791 cv
58.8218 55.2959 li
59.0225 55.396 li
58.8076 55.897 58.8252 55.9502 59.355 56.2153 cv
60.9648 57.0205 li
cp
f
58.3018 62.4268 mo
58.4854 62.5552 58.4829 62.5728 58.2949 62.8418 cv
58.0654 63.1694 57.6738 63.3247 57.2539 63.0312 cv
57.0244 62.8711 56.8828 62.6547 56.8999 62.3931 cv
56.9102 62.2246 57.0054 62.0469 57.106 61.9028 cv
57.2529 61.6933 li
58.3018 62.4268 li
cp
57.043 61.5464 mo
56.9697 61.6514 li
56.832 61.8477 56.769 61.8818 56.5767 61.8643 cv
56.3149 61.8477 55.8745 61.7929 55.5547 61.8037 cv
55.1948 61.8159 54.9072 61.8784 54.4927 62.457 cv
54.3091 62.7192 li
54.4658 62.8579 li
54.583 62.7744 54.7422 62.7002 54.8853 62.6631 cv
55.0122 62.6353 55.2373 62.6069 55.5767 62.6099 cv
55.8696 62.6099 56.3311 62.6201 56.5239 62.6377 cv
56.3896 63.0811 56.4395 63.5259 56.8262 63.7964 cv
57.1147 63.9979 57.4321 64.0054 57.6719 63.8994 cv
57.916 63.7876 58.1299 63.5659 58.3408 63.2642 cv
59.4868 61.6255 li
59.3037 61.4971 li
59.002 61.8721 58.9482 61.8931 58.4634 61.5537 cv
56.9814 60.5176 li
56.5034 60.1826 56.498 60.1206 56.7607 59.689 cv
56.5771 59.5605 li
55.4858 61.1211 li
55.6689 61.2495 li
55.98 60.8612 56.04 60.8447 56.5186 61.1796 cv
57.043 61.5464 li
cp
f
52.8091 65.7178 mo
52.3872 65.3145 52.3247 65.3213 51.915 65.7041 cv
51.7529 65.5493 li
53.1567 64.0801 li
53.3188 64.2348 li
52.9717 64.6445 52.9673 64.707 53.3896 65.1104 cv
55.1309 66.7739 li
55.2578 66.6411 li
55.584 66.2998 55.6426 66.1343 55.6338 66.0044 cv
55.6255 65.897 55.5713 65.7456 55.4009 65.4834 cv
55.5562 65.3213 li
55.8574 65.6426 56.1133 65.9424 56.3101 66.1416 cv
56.2217 66.2339 li
56.0742 66.2148 56.0186 66.25 55.8857 66.3887 cv
54.167 68.188 li
54.0342 68.3267 54.0352 68.3721 54.0498 68.5073 cv
53.9614 68.6001 li
53.7588 68.4062 53.3667 68.0874 53.1191 67.895 cv
53.2676 67.7158 li
53.5493 67.8965 53.6978 67.9497 53.8218 67.9468 cv
53.9688 67.9434 54.125 67.8266 54.335 67.6069 cv
54.5503 67.3813 li
52.8091 65.7178 li
cp
f
51.0083 69.6206 mo
50.9893 69.6353 li
49.9458 69.0072 li
50.6538 68.458 li
51.0083 69.6206 li
cp
49.0396 67.8774 mo
47.6045 68.9902 li
47.7417 69.1675 li
48.0269 68.9867 48.1631 68.9014 48.5781 69.1362 cv
51.3413 70.729 li
51.5361 70.4971 li
50.7676 67.56 li
50.6211 67.0059 50.7251 66.9048 50.9658 66.667 cv
50.8286 66.4902 li
49.6841 67.3774 li
49.8218 67.5546 li
49.9766 67.4546 li
50.1685 67.3359 50.2456 67.3574 50.3359 67.5907 cv
50.4209 67.8184 50.5083 68.0747 50.5371 68.1641 cv
49.6709 68.8354 li
49.2251 68.5737 li
48.9067 68.3853 48.9038 68.3164 49.0664 68.1602 cv
49.1768 68.0547 li
49.0396 67.8774 li
cp
f
45.436 71.2016 mo
45.1606 70.687 45.0991 70.6742 44.5903 70.9101 cv
44.4849 70.7129 li
46.2764 69.7539 li
46.3818 69.9517 li
45.9243 70.2324 45.9009 70.2904 46.1768 70.8057 cv
47.3125 72.9287 li
47.4751 72.8418 li
47.8911 72.6191 47.998 72.4804 48.0303 72.354 cv
48.0562 72.2495 48.0518 72.0884 47.9717 71.7866 cv
48.1694 71.6806 li
48.356 72.0801 48.5054 72.4448 48.6304 72.6953 cv
48.5176 72.7558 li
48.3833 72.6914 48.3193 72.7074 48.1499 72.7983 cv
45.9565 73.9722 li
45.7871 74.0625 45.7739 74.106 45.7456 74.2393 cv
45.6328 74.2993 li
45.5005 74.0527 45.2275 73.627 45.0522 73.3671 cv
45.249 73.2437 li
45.46 73.5024 45.5845 73.5991 45.7036 73.6353 cv
45.8447 73.6782 46.0288 73.6156 46.2969 73.4721 cv
46.5718 73.3252 li
45.436 71.2016 li
cp
f
41.4209 72.8662 mo
41.2344 72.3125 41.1758 72.29 40.6958 72.418 cv
40.6245 72.2061 li
42.4512 71.5898 li
42.5229 71.8022 li
42.063 71.9912 42.0303 72.0444 42.2168 72.5976 cv
42.7944 74.311 li
42.9834 74.8721 43.0391 74.8872 43.5195 74.7587 cv
43.5908 74.9712 li
41.7642 75.5869 li
41.6924 75.375 li
42.1523 75.186 42.1875 75.1405 41.9985 74.5796 cv
41.4209 72.8662 li
cp
f
38.9351 73.8433 mo
38.7524 73.4673 38.248 72.958 37.7188 73.0439 cv
37.3716 73.1005 37.1455 73.356 37.1958 73.664 cv
37.2471 73.98 37.4761 74.1938 37.9048 74.2861 cv
38.1309 74.3305 li
38.6182 74.4375 39.1514 74.6264 39.2388 75.1636 cv
39.3438 75.811 38.9316 76.3643 38.0234 76.5122 cv
37.6836 76.5674 37.3081 76.4985 37.1606 76.4902 cv
37.0942 76.2822 37.0181 76.0107 36.8984 75.625 cv
37.1382 75.5537 li
37.3364 75.9751 37.6694 76.2778 38.0879 76.2099 cv
38.4033 76.1587 38.5952 75.8921 38.5479 75.6001 cv
38.5005 75.3081 38.2432 75.1714 37.917 75.1108 cv
37.708 75.0718 li
37.1152 74.9658 36.5771 74.745 36.4663 74.1147 cv
36.3535 73.4199 36.8911 72.8867 37.7515 72.7466 cv
38.2808 72.6606 38.6763 72.7993 38.8242 72.8642 cv
38.8911 72.9751 39.0444 73.4199 39.1772 73.7876 cv
38.9351 73.8433 li
cp
f
32.9536 75.1133 mo
32.9536 74.6167 33.3452 74.2163 33.8247 74.2163 cv
34.3042 74.2163 34.7036 74.6167 34.7036 75.1133 cv
34.7036 75.6016 34.3042 76.0103 33.8247 76.0103 cv
33.3452 76.0103 32.9536 75.6016 32.9536 75.1133 cv
cp
f
23.9063 33.4502 mo
23.9028 33.4502 li
23.9028 33.4502 23.9043 33.4555 23.9063 33.4502 cv
cp
ef
53.813 17.96 mo
53.7969 17.939 53.7817 17.917 53.7661 17.896 cv
53.7661 29.1279 li
54.0093 29.0801 54.2715 29.1504 54.46 29.3393 cv
54.4785 29.3574 54.4917 29.3779 54.5073 29.3975 cv
54.2188 29.3511 53.9126 29.437 53.6899 29.6597 cv
53.4673 29.8823 53.3813 30.188 53.4272 30.4766 cv
53.4966 30.5371 53.5742 30.5884 53.6616 30.6206 cv
53.6304 30.7227 53.2852 31.7412 52.0063 31.7412 cv
51.3579 31.7412 50.541 31.2124 50.541 30.2998 cv
50.541 30.2998 50.6094 30.1665 50.7852 30.1084 cv
50.8765 30.4316 51.1733 30.6694 51.5259 30.6694 cv
51.9512 30.6694 52.2964 30.3247 52.2964 29.8988 cv
52.2964 29.4736 51.9512 29.1289 51.5259 29.1289 cv
51.1162 29.1289 50.7822 29.4491 50.7583 29.853 cv
50.6582 29.8662 50.4297 29.8472 50.4004 29.4092 cv
50.7666 29.3496 51.0469 29.0327 51.0469 28.6499 cv
51.0469 28.2241 50.7021 27.8794 50.2764 27.8794 cv
49.8511 27.8794 49.5063 28.2241 49.5063 28.6499 cv
49.5063 29.0327 49.7866 29.3496 50.1528 29.4092 cv
50.1235 29.8472 49.895 29.8662 49.7949 29.853 cv
49.771 29.4491 49.437 29.1289 49.0273 29.1289 cv
48.6016 29.1289 48.2568 29.4736 48.2568 29.8988 cv
48.2568 30.3247 48.6016 30.6694 49.0273 30.6694 cv
49.3799 30.6694 49.6768 30.4316 49.7676 30.1084 cv
49.9434 30.1665 50.0122 30.2998 50.0122 30.2998 cv
50.0122 31.2124 49.1953 31.7412 48.5469 31.7412 cv
47.2681 31.7412 46.9229 30.7227 46.8916 30.6206 cv
47.1851 30.5122 47.3945 30.2305 47.3945 29.8988 cv
47.3945 29.7061 47.3223 29.5312 47.2046 29.397 cv
46.917 29.3525 46.6128 29.438 46.3916 29.6597 cv
46.1685 29.8823 46.0825 30.1885 46.1289 30.4775 cv
46.1094 30.4613 46.0889 30.4482 46.0708 30.4302 cv
45.7695 30.1289 45.7695 29.6406 46.0708 29.3393 cv
46.2441 29.166 46.4795 29.0957 46.7051 29.1221 cv
46.7051 16.7617 li
46.7051 16.7617 46.8691 7.2954 33.5508 7.3877 cv
19.5767 7.5723 20.6421 16.7314 20.6421 16.7314 cv
20.6421 29.165 li
20.896 29.1016 21.1753 29.1665 21.374 29.3652 cv
21.6753 29.6665 21.6753 30.1548 21.374 30.4561 cv
21.356 30.4741 21.3354 30.4873 21.3159 30.5034 cv
21.3623 30.2144 21.2764 29.9082 21.0532 29.6855 cv
20.8359 29.4678 20.5386 29.3828 20.2549 29.4224 cv
20.144 29.5547 20.0762 29.7241 20.0762 29.9106 cv
20.0762 30.2421 20.2856 30.5239 20.5791 30.6323 cv
20.5479 30.7344 20.2026 31.7529 18.9243 31.7529 cv
18.2754 31.7529 17.4585 31.2241 17.4585 30.311 cv
17.4585 30.311 17.5269 30.1782 17.7031 30.12 cv
17.7944 30.4434 18.0908 30.6812 18.4434 30.6812 cv
18.8691 30.6812 19.2139 30.3359 19.2139 29.9106 cv
19.2139 29.4854 18.8691 29.1406 18.4434 29.1406 cv
18.0337 29.1406 17.6997 29.4609 17.6758 29.8647 cv
17.5757 29.8779 17.3472 29.8589 17.3179 29.4204 cv
17.6841 29.3613 17.9644 29.0444 17.9644 28.6616 cv
17.9644 28.2358 17.6196 27.8911 17.1943 27.8911 cv
16.769 27.8911 16.4238 28.2358 16.4238 28.6616 cv
16.4238 29.0444 16.7041 29.3613 17.0703 29.4204 cv
17.0415 29.8589 16.813 29.8779 16.7129 29.8647 cv
16.6885 29.4609 16.3545 29.1406 15.9448 29.1406 cv
15.5195 29.1406 15.1743 29.4854 15.1743 29.9106 cv
15.1743 30.3359 15.5195 30.6812 15.9448 30.6812 cv
16.2974 30.6812 16.5942 30.4434 16.6855 30.12 cv
16.8613 30.1782 16.9297 30.311 16.9297 30.311 cv
16.9297 31.2241 16.1128 31.7529 15.4639 31.7529 cv
14.5425 31.7529 14.1069 31.2246 13.9233 30.8905 cv
13.9233 30.5781 li
13.9746 30.5488 14.0215 30.5132 14.0649 30.4731 cv
14.1006 30.1929 14.0161 29.8999 13.8008 29.6841 cv
13.5781 29.4619 13.272 29.376 12.9834 29.4219 cv
12.999 29.4023 13.0127 29.3818 13.0308 29.3638 cv
13.2725 29.1221 13.6338 29.0776 13.9233 29.2246 cv
13.9233 17.896 li
13.9072 17.917 13.8921 17.939 13.876 17.96 cv
9.583 23.6675 6.9658 31.2187 6.9658 39.4897 cv
6.9658 44.143 7.7944 48.5683 9.2837 52.5664 cv
9.3325 52.6978 9.3838 52.828 9.4341 52.9585 cv
12.0313 52.9507 li
11.71 53.2202 11.5313 53.5288 11.5313 53.854 cv
11.5313 54.0396 11.582 54.1802 11.687 54.2842 cv
11.9087 54.5049 12.3276 54.4888 12.8584 54.4858 cv
21.4409 54.4961 li
22.2197 54.4912 22.6489 54.4883 22.6489 53.854 cv
22.6489 53.5264 22.4683 53.2158 22.1426 52.9453 cv
24.627 52.9453 li
24.3652 52.8003 23.9941 52.5767 23.4707 52.2187 cv
21.7871 51.0664 23.2925 49.9771 23.7622 49.6112 cv
25.2158 48.481 24.5605 47.8745 24.189 47.165 cv
24.189 47.165 23.2095 45.5557 25.5928 42.0674 cv
25.9404 41.5586 26.5708 40.9057 26.8936 39.6152 cv
26.8936 39.6152 25.8091 40.5825 25.7568 38.7334 cv
25.7441 38.2822 26.8628 31.1953 29.5669 26.9755 cv
29.772 26.6553 30.0205 26.7915 29.833 27.0576 cv
29.7866 27.1235 28.6001 29.3799 28.334 30.6577 cv
28.2739 30.9478 28.356 30.9868 28.479 31.0928 cv
28.564 31.165 28.8198 31.2432 28.709 31.5762 cv
28.5557 32.0352 27.2681 35.0107 26.8477 37.3848 cv
26.7207 38.1016 27.1592 38.2437 27.3555 37.6909 cv
27.5908 37.0264 28.2002 37.3706 28.2061 38.3672 cv
28.207 38.5273 28.2202 38.7148 28.2183 38.9355 cv
28.2144 39.415 27.8462 41.7998 26.751 43.4106 cv
26.751 43.4106 26.5254 43.8779 26.3965 44.0552 cv
26.188 44.3423 26.0259 44.039 26.0259 44.039 cv
25.9775 43.7973 25.5264 43.7007 25.1396 44.1518 cv
24.1089 45.3545 24.6563 46.73 25.3975 46.4238 cv
25.7559 46.2759 26.1387 45.8437 26.2676 45.6504 cv
26.6025 45.1484 26.7759 44.6841 26.8638 44.5224 cv
27.4922 43.3706 27.814 43.7182 27.5723 44.5722 cv
27.2778 45.6123 27.0591 47.0586 26.2832 48.25 cv
25.5005 49.4521 25.4634 48.8423 24.7329 49.5093 cv
24.54 49.6855 24.3667 49.8105 24.2012 49.981 cv
23.2422 50.9678 25.7207 51.3125 28.2832 51.25 cv
28.3242 49.939 28.4922 46.0659 28.5889 44.5918 cv
28.6362 43.8667 28.6362 42.1621 28.6606 41.9204 cv
28.7124 41.4014 28.7813 41.0986 28.8052 40.664 cv
28.8813 39.3017 28.8599 39.2187 28.9204 38.9287 cv
28.9546 38.7637 29.1753 38.6523 29.3193 38.6709 cv
30.0767 38.7676 30.5278 38.7998 30.9263 38.7295 cv
31.0083 38.7148 31.1602 38.9492 31.2007 38.8442 cv
31.2378 38.749 31.2021 39.7187 31.4521 39.75 cv
31.6689 39.7773 31.7334 38.375 31.7334 38.375 cv
31.5381 38.3911 31.0962 38.1357 30.8677 38.1582 cv
30.0225 38.2417 28.9023 38.0532 28.7168 37.9326 cv
28.312 37.6684 28.5361 36.8046 28.5361 36.8046 cv
28.9111 33.5713 29.3208 31.8505 29.3208 31.8505 cv
29.4438 31.2773 29.6514 30.8271 29.313 30.585 cv
28.5532 30.0425 30.5298 27.3442 30.6729 26.5454 cv
30.6626 26.6021 31.8403 25.5005 32.4961 25.2549 cv
32.4961 25.0703 li
32.3359 25.0186 31.9019 25.2344 31.6152 25.2344 cv
31.3491 25.3164 30.9951 25.5488 30.417 25.9613 cv
29.9868 26.2686 29.6353 26.4443 29.0068 26.6377 cv
29.0068 26.6377 28.6724 28.0957 27.5566 29.2314 cv
27.3887 29.4023 26.4346 30.2168 25.8325 28.6514 cv
25.752 28.4424 25.1626 25.6543 26.5254 24.4141 cv
27.0005 23.9819 28.02 24.333 28.2046 24.7016 cv
28.2046 24.7016 29.4268 25.1069 30.7241 24.0874 cv
30.8496 23.9888 30.728 23.5195 31.0049 23.1572 cv
31.2144 22.8838 31.2305 22.6577 31.2305 22.4004 cv
31.2305 22.1587 31.6196 22.3354 31.6333 22.5288 cv
31.6494 22.7544 31.7012 22.7842 31.6333 23.1255 cv
31.6011 23.2861 31.6699 23.3208 31.875 23.23 cv
32.3096 23.0366 33.0986 22.3364 33.3574 22.078 cv
33.502 21.9326 33.9106 21.913 33.6309 22.3193 cv
33.4541 22.5771 33.4336 22.6938 33.0107 23.1294 cv
32.9331 23.209 33.019 23.3301 33.1436 23.3105 cv
33.3735 23.2744 34.0503 22.9364 34.1348 22.8994 cv
34.3281 22.8149 34.4854 22.8936 34.4551 23.063 cv
34.4551 23.063 34.6846 23.0869 34.6221 23.27 cv
34.5669 23.4316 34.332 23.7617 33.917 24.0234 cv
33.71 24.1538 33.603 24.1924 33.603 24.1924 cv
33.5103 24.2529 33.5029 24.3633 33.6636 24.3496 cv
33.8564 24.3335 34.2212 24.2354 34.2783 24.292 cv
34.4214 24.4355 33.9961 24.6367 33.8682 24.6606 cv
33.7393 24.6851 36.2666 24.7085 37.2832 25.1557 cv
37.2891 24.292 li
37.2891 24.292 37.2891 24.1895 37.0215 24.0923 cv
36.8945 23.8853 36.7759 23.5815 36.9385 23.3105 cv
36.9653 23.2661 37.0171 23.2178 37.0771 23.1616 cv
37.3809 22.877 38.105 22.4472 37.4756 20.897 cv
37.3706 20.6392 37.2861 20.4219 37.2603 20.3442 cv
37.0391 20.418 li
37.0723 20.5176 37.1787 20.7749 37.2593 20.9849 cv
37.7119 22.1631 37.2266 22.5947 36.9131 22.7979 cv
36.6421 22.9731 36.0757 22.8887 36.0322 22.9619 cv
35.8667 23.2378 36.4048 23.7104 36.5034 23.9448 cv
36.2231 23.8652 36.0654 23.8359 35.5488 23.7695 cv
34.2432 19.709 li
34.2432 19.709 30.9805 20.8936 29.7319 23.4634 cv
29.647 23.6387 29.6514 23.7534 29.6514 23.8179 cv
29.6514 23.9629 29.5664 24.2187 29.2969 24.269 cv
29.0391 24.3174 28.8169 24.2085 28.7007 24.0435 cv
28.2012 23.3345 26.2202 23.0586 23.6572 23.3105 cv
24.2134 22.5371 li
24.2134 22.5371 26.7271 22.2471 28.5474 23.1089 cv
28.6978 23.1797 28.7651 23.2544 28.6606 23.0448 cv
28.499 22.7222 27.1475 21.0127 25.3975 19.6123 cv
25.3975 19.6123 26.2676 19.3467 26.3643 19.4434 cv
26.5942 19.6733 27.9321 20.8896 28.1528 21.1596 cv
28.2617 21.2925 28.4941 21.5688 28.4941 21.5688 cv
28.4941 21.5688 28.6001 21.2075 28.6846 21.0142 cv
28.6846 21.0142 29.0088 20.0981 29.3545 19.2948 cv
29.417 19.1504 29.5796 18.312 30.4727 17.9932 cv
30.7339 17.9004 30.8911 17.9634 31.5659 17.7948 cv
32.1045 17.7178 li
31.9722 17.8511 32.0122 17.9032 32.0122 17.9482 cv
32.0122 18.6934 33.0732 19.1284 34.1938 19.1284 cv
35.293 19.1284 36.3413 18.6582 36.3755 17.9331 cv
36.5728 18.1084 36.6616 18.163 36.9663 18.3075 cv
37.5786 18.5976 39.3745 18.8452 39.1577 22.7544 cv
39.1348 23.1621 39.0815 24.917 39.1738 25.2856 cv
39.2754 25.6914 39.5845 26.3393 39.7266 26.668 cv
39.9111 26.9448 40.2788 27.4966 40.4185 27.6729 cv
40.6963 28.0234 40.793 28.663 40.2612 28.748 cv
39.9595 28.7969 39.8188 28.7271 39.8188 28.7271 cv
39.8188 28.7271 40.5996 30.9233 40.5996 32.1318 cv
40.5996 32.5429 40.7285 32.855 40.769 33.0263 cv
40.7773 33.062 40.7842 33.1011 40.79 33.1411 cv
41.043 33.3662 li
41.2065 33.5298 41.2319 33.7007 41.2065 33.8481 cv
41.6118 34.1255 41.8198 34.4448 41.939 34.8105 cv
42.1885 35.5762 41.8008 35.7173 41.8008 35.7173 cv
41.8931 37.6221 41.8896 37.4516 41.8623 39.4502 cv
41.8164 42.8301 41.9155 47.0273 40.7974 50.8394 cv
40.5298 51.75 40.1675 52.4399 39.8257 52.9453 cv
45.2407 52.9453 li
44.915 53.2158 44.7344 53.5264 44.7344 53.854 cv
44.7344 54.0396 44.7852 54.1802 44.8901 54.2842 cv
45.1118 54.5049 45.5308 54.5029 46.061 54.5 cv
46.251 54.4995 li
46.251 54.4995 54.3354 54.4995 54.3374 54.4995 cv
54.6436 54.4961 li
55.4229 54.4912 55.8521 54.4883 55.8521 53.854 cv
55.8521 53.5273 55.6724 53.2323 55.3496 52.9629 cv
58.2549 52.9585 li
58.3052 52.828 58.3564 52.6978 58.4058 52.5664 cv
59.8945 48.5683 60.7236 44.143 60.7236 39.4897 cv
60.7236 31.2187 58.1064 23.6675 53.813 17.96 cv
cp
20.9907 30.6713 mo
20.9907 30.6713 20.9971 30.7627 21.0293 30.896 cv
21.1216 31.2754 21.4233 31.9985 22.3843 31.9448 cv
22.5918 31.9336 22.7749 31.8804 22.936 31.7983 cv
22.7256 31.9613 22.4702 32.0737 22.1577 32.0908 cv
20.8604 32.1631 20.7642 30.8174 20.7642 30.8174 cv
20.9907 30.6713 li
cp
10.6968 29.9644 mo
10.998 29.6631 11.4863 29.6631 11.7876 29.9644 cv
12.0889 30.2656 12.0889 30.7539 11.7876 31.0552 cv
11.7695 31.0732 11.749 31.0864 11.7295 31.1025 cv
11.7754 30.8135 11.6895 30.5073 11.4668 30.2847 cv
11.2441 30.062 10.9385 29.9761 10.6494 30.0225 cv
10.665 30.0029 10.6787 29.9823 10.6968 29.9644 cv
cp
10.0977 30.4561 mo
10.0796 30.4741 10.0586 30.4873 10.0396 30.5034 cv
10.0854 30.2144 10 29.9082 9.7773 29.6855 cv
9.5542 29.4629 9.2485 29.377 8.9595 29.4229 cv
8.9751 29.4038 8.9888 29.3833 9.0068 29.3652 cv
9.3081 29.0639 9.7964 29.0639 10.0977 29.3652 cv
10.3989 29.6665 10.3989 30.1548 10.0977 30.4561 cv
cp
10.7725 31.1322 mo
11.0298 31.5527 11.4194 31.9126 12.0039 31.9448 cv
12.2764 31.9599 12.4951 31.9126 12.6719 31.828 cv
12.4673 31.9976 12.1816 32.1133 11.7778 32.0908 cv
11.1929 32.0586 10.8037 31.6987 10.5459 31.2783 cv
10.7725 31.1322 li
cp
22.4033 53.854 mo
22.4033 53.9092 22.3999 53.9556 22.3926 53.9961 cv
11.7964 53.9961 li
11.7842 53.9551 11.7773 53.9092 11.7773 53.854 cv
11.7773 53.5322 12.0244 53.2144 12.4546 52.9497 cv
12.6313 52.8408 12.8359 52.7407 13.0713 52.6538 cv
13.0479 52.6538 li
13.062 52.6538 13.0762 52.6514 13.0898 52.6465 cv
13.0835 52.6489 13.0781 52.6514 13.0713 52.6538 cv
21.1089 52.6538 li
21.1025 52.6514 21.0967 52.6489 21.0908 52.6465 cv
21.104 52.6514 21.1182 52.6538 21.1323 52.6538 cv
21.1089 52.6538 li
21.3413 52.7393 21.5439 52.8384 21.7188 52.9453 cv
22.1533 53.2109 22.4033 53.5308 22.4033 53.854 cv
cp
24.2622 29.3804 mo
24.5635 29.0791 25.0518 29.0791 25.353 29.3804 cv
25.6543 29.6816 25.6543 30.1698 25.353 30.4712 cv
25.335 30.4892 25.3145 30.5024 25.2949 30.5185 cv
25.3413 30.2295 25.2554 29.9238 25.0322 29.7007 cv
24.8096 29.478 24.5039 29.3921 24.2148 29.4385 cv
24.2305 29.4189 24.2441 29.3984 24.2622 29.3804 cv
cp
24.4229 30.897 mo
24.1445 31.1396 23.8696 31.6523 23.9028 32.7378 cv
23.9204 33.331 23.9116 33.4355 23.9063 33.4502 cv
23.917 33.4502 li
23.917 42.543 li
23.917 44.9819 22.6011 47.1128 20.6421 48.2676 cv
20.6421 52.4082 li
13.9233 52.4082 li
13.9233 49.1201 li
14.689 49.4281 15.5244 49.5991 16.4004 49.5991 cv
17.5967 49.5991 18.7188 49.2808 19.6885 48.7265 cv
18.9399 49.019 18.1279 49.1846 17.2759 49.1846 cv
16.0527 49.1846 14.9072 48.853 13.9233 48.2759 cv
13.9233 48.2754 li
11.9565 47.1225 10.6348 44.9878 10.6348 42.543 cv
10.6348 33.4502 li
23.6865 33.4502 li
23.688 33.3559 23.6865 33.2236 23.6763 32.8838 cv
23.6343 31.4976 24.0942 31.0444 24.4229 30.897 cv
cp
23.6938 29.9795 mo
23.9951 30.2808 23.9951 30.769 23.6938 31.0703 cv
23.6758 31.0884 23.6553 31.1015 23.6357 31.1177 cv
23.6816 30.8286 23.5962 30.5229 23.3735 30.3003 cv
23.1504 30.0771 22.8447 29.9917 22.5557 30.0376 cv
22.5718 30.0186 22.585 29.9976 22.603 29.9795 cv
22.9043 29.6782 23.3926 29.6782 23.6938 29.9795 cv
cp
38.4165 10.6538 mo
38.4048 11.0728 38.1104 12.0718 37.0469 12.0718 cv
36.064 12.0718 35.7739 11.7979 35.5967 11.4756 cv
35.3218 10.9761 34.8984 10.8433 34.8545 10.7891 cv
34.686 10.8447 li
34.6538 10.9404 34.9341 11.2041 35.1309 11.4292 cv
35.4014 11.7383 35.5322 12.3623 35.5005 12.5874 cv
35.4819 12.7163 35.5034 12.7681 35.5967 12.7969 cv
36.7813 13.1597 36.5996 13.957 36.5957 14.5693 cv
36.5903 15.3828 37.9541 15.5264 38.1152 15.623 cv
38.3145 15.7427 38.104 15.9077 37.9292 15.9419 cv
37.061 16.1123 36.3472 16.1904 35.5176 16.2368 cv
35.437 16.2412 35.5044 16.2392 35.4561 16.3521 cv
35.4561 16.3521 35.3745 16.5625 35.8418 17.3535 cv
35.8911 17.4365 35.9482 17.5273 36.0112 17.6152 cv
36.02 17.6245 li
36.0313 17.6753 36.0386 17.7266 36.0386 17.7793 cv
36.0386 18.4214 35.2109 18.9433 34.1938 18.9433 cv
33.1768 18.9433 32.3491 18.4214 32.3491 17.7793 cv
32.3491 17.7012 32.3579 17.7456 32.3809 17.6719 cv
32.5308 17.6366 32.9189 17.5796 32.9189 17.5796 cv
32.9189 17.5796 32.8882 17.4414 32.8418 17.2876 cv
33.0166 17.3467 33.147 17.3184 33.417 17.2329 cv
33.4736 17.2124 33.5645 17.1787 33.6162 17.1538 cv
33.6694 17.1289 33.708 17.0825 33.6943 17.0254 cv
33.6802 16.9683 33.6226 16.9336 33.5654 16.9473 cv
32.5293 17.2016 32.1738 16.3867 31.939 15.8472 cv
31.9058 15.7715 31.877 15.7056 31.8491 15.6499 cv
31.8091 15.5693 31.7954 15.4707 31.7798 15.3564 cv
31.7583 15.1978 31.7339 15.0176 31.6299 14.8252 cv
31.6118 14.791 31.5928 14.7441 31.5752 14.6919 cv
31.5679 14.6685 31.5601 14.6392 31.5522 14.6113 cv
31.7178 14.5581 31.8628 14.5308 31.9858 14.5215 cv
31.9463 14.5732 31.9272 14.6396 31.9448 14.708 cv
31.9746 14.8267 32.0952 14.8984 32.2139 14.8681 cv
32.332 14.8384 32.4043 14.7178 32.374 14.5991 cv
32.3691 14.5786 32.2134 14.4995 32.2036 14.4819 cv
32.3208 14.5098 32.4785 14.4458 32.4834 14.4487 cv
32.542 14.48 32.6152 14.458 32.6465 14.3994 cv
32.6782 14.3403 32.6563 14.2671 32.5977 14.2358 cv
32.5596 14.2153 32.2622 14.2856 31.5103 14.4565 cv
31.4814 14.3486 31.4561 14.2456 31.4473 14.202 cv
31.4331 14.1201 li
31.8042 13.8086 32.769 13.9209 32.769 13.9209 cv
32.1201 13.6411 31.9209 13.6182 31.2441 13.7026 cv
30.5908 13.7842 30.2959 14.1343 30.6343 14.5693 cv
30.6343 14.5693 31.3389 15.6377 30.0791 16.498 cv
30.0791 16.498 31.1753 16.5752 32.0532 16.4365 cv
32.23 16.77 li
31.2158 16.8975 30.0195 16.9536 29.6753 16.9175 cv
29.0493 16.853 29.3975 16.6684 29.5386 16.5351 cv
30.4248 15.6972 30.3442 15.5683 29.9575 15.1333 cv
29.2583 14.3467 30.0381 13.8604 30.3281 13.667 cv
30.8257 13.335 30.9243 13.0063 30.9404 12.6518 cv
31.0083 11.1528 31.8105 10.6538 31.9956 10.4648 cv
32.1689 10.2876 32.1284 10.078 31.8145 10.0176 cv
31.1162 9.8833 30.9927 10.3804 31.0049 10.5371 cv
31.0469 11.0845 30.9565 11.5884 30.8599 11.7699 cv
30.4624 12.5145 29.6636 12.4346 29.168 12.06 cv
28.4243 11.4975 28.8491 10.5386 28.9868 10.4526 cv
29.1802 10.3315 29.1318 10.1626 28.9824 10.0659 cv
28.6143 9.8271 28.5879 9.333 29.1519 8.9702 cv
30.3945 8.1713 31.6895 9.3652 31.8105 9.4453 cv
32.188 9.6973 32.2939 9.2524 32.0845 9.1313 cv
31.8438 8.9927 31.7783 8.8896 31.7783 8.5674 cv
31.7783 8.3862 31.9233 7.9512 32.5396 7.9512 cv
33.1436 7.9512 33.2524 8.3018 33.2524 8.543 cv
33.2524 8.749 33.2402 9.0869 33.5908 9.0869 cv
33.8687 9.0869 33.772 8.6523 33.917 8.5068 cv
34.5879 7.8364 35.3667 8.3905 35.4639 8.6523 cv
35.7778 9.498 35.1738 9.9209 34.9199 10.0176 cv
34.2402 10.2769 35.563 10.6698 35.5488 10.6698 cv
36.2617 10.6698 36.4507 10.1021 36.4507 9.7676 cv
36.4507 9.2202 37.5723 9.3008 37.2563 9.3008 cv
38.3843 9.3008 38.4326 10.0742 38.4165 10.6538 cv
cp
55.688 29.9526 mo
55.9893 29.6513 56.4775 29.6513 56.7788 29.9526 cv
56.7969 29.9707 56.8105 29.9912 56.8262 30.0107 cv
56.5371 29.9644 56.2314 30.0503 56.0088 30.2729 cv
55.7856 30.4956 55.6997 30.8018 55.7461 31.0908 cv
55.7266 31.0747 55.7061 31.0615 55.688 31.0435 cv
55.3867 30.7422 55.3867 30.2539 55.688 29.9526 cv
cp
55.4663 31.9336 mo
56.0518 31.9009 56.4409 31.5409 56.6982 31.1206 cv
56.9248 31.2666 li
56.6675 31.687 56.2778 32.0469 55.6929 32.0791 cv
55.2891 32.1016 55.0034 31.9858 54.7988 31.8169 cv
54.9756 31.9009 55.1943 31.9482 55.4663 31.9336 cv
cp
50.5693 37.5068 mo
53.6118 37.5068 li
53.6118 41.1938 li
52.0938 41.1938 li
52.0938 40.3481 li
52.1504 40.3534 52.2065 40.3628 52.2627 40.3628 cv
52.519 40.3628 52.7788 40.2827 52.9399 40.1406 cv
53.1416 39.9672 53.2075 39.7231 53.2075 39.438 cv
53.2075 39.5518 li
53.2075 39.2168 53.2256 39.0522 53.2402 38.9639 cv
52.9985 38.9639 li
53.0112 39.04 53.0264 39.1738 53.0303 39.4238 cv
53.0249 39.9258 52.8062 40.1908 52.3687 40.1908 cv
52.2617 40.1908 52.1714 40.1724 52.0938 40.1406 cv
52.0938 39.3496 li
51.7466 39.3496 li
51.7466 38.7808 li
51.7466 38.4629 52.0376 38.4453 52.3086 38.4277 cv
52.3086 38.2891 li
50.7993 38.2891 li
50.7993 38.4277 li
51.0928 38.4453 51.3359 38.4629 51.3359 38.7808 cv
51.3359 39.3496 li
50.9336 39.3496 li
50.5693 39.3496 li
50.5693 37.5068 li
cp
53.8569 35.2471 mo
53.8472 35.2939 53.7822 35.3203 53.7114 35.3056 cv
53.6411 35.2909 53.5918 35.2412 53.6016 35.1943 cv
53.606 35.1738 53.624 35.1602 53.6445 35.1494 cv
53.5127 35.0869 li
53.4941 35.0781 53.4868 35.0557 53.4951 35.0376 cv
53.5039 35.019 53.5259 35.0112 53.5444 35.0199 cv
53.8486 35.1646 li
53.8667 35.1733 53.8745 35.1953 53.8657 35.2139 cv
53.8623 35.2207 53.8535 35.2168 53.8472 35.2202 cv
53.8496 35.2295 53.8589 35.2378 53.8569 35.2471 cv
cp
53.7798 35.6094 mo
54.1025 35.6792 53.9795 35.8945 53.9644 35.9712 cv
53.9644 35.9712 53.9185 35.6025 53.4419 35.8022 cv
53.4419 35.8022 53.5303 35.5557 53.7798 35.6094 cv
cp
53.9355 35.2422 mo
53.9346 35.2217 53.9507 35.2046 53.9712 35.2036 cv
54.3076 35.1909 li
54.3276 35.1899 54.3447 35.206 54.3457 35.2261 cv
54.3462 35.2466 54.3306 35.2637 54.3101 35.2646 cv
54.1646 35.27 li
54.1792 35.2881 54.1904 35.3081 54.186 35.3281 cv
54.1768 35.375 54.1118 35.4019 54.041 35.3872 cv
53.9707 35.373 53.9214 35.3232 53.9307 35.2763 cv
53.9326 35.2671 53.9443 35.2632 53.9502 35.2554 cv
53.9458 35.2495 53.936 35.2495 53.9355 35.2422 cv
cp
54.1533 37.625 mo
54.1533 37.625 54.2603 37.7471 54.0903 37.7612 cv
54.0439 37.7651 53.9619 37.7808 53.8574 37.8286 cv
53.8574 37.5747 li
53.9551 37.5967 54.0547 37.6162 54.1533 37.625 cv
cp
52.0469 41.9912 mo
52.0762 41.8667 52.0938 41.7378 52.0938 41.604 cv
52.0938 41.4395 li
53.6118 41.4395 li
53.6118 41.9302 li
53.6118 42.48 53.4722 42.9975 53.2266 43.4502 cv
52.0469 41.9912 li
cp
52.0557 44.6689 mo
51.6172 44.9331 51.1113 45.0962 50.5693 45.1226 cv
50.5693 43.2725 li
50.6763 43.2622 50.7808 43.2456 50.8809 43.2163 cv
52.0557 44.6689 li
cp
50.9336 40.5107 mo
50.9336 39.5952 li
51.8477 39.5952 li
51.8477 40.5107 li
50.9336 40.5107 li
50.9336 41.5488 li
51.8477 41.5488 li
51.8477 41.604 li
51.8477 41.6489 51.8452 41.6934 51.8413 41.7368 cv
51.7905 42.2866 51.4287 42.7471 50.9336 42.9399 cv
50.9336 41.5488 li
49.8955 41.5488 li
49.8955 42.9395 li
49.3608 42.7309 48.98 42.2119 48.98 41.604 cv
48.98 41.5488 li
49.8955 41.5488 li
49.8955 40.5107 li
48.98 40.5107 li
48.98 39.5952 li
49.8955 39.5952 li
49.8955 40.5107 li
50.9336 40.5107 li
cp
47.1016 34.7549 mo
47.0762 34.7529 47.0571 34.7314 47.0591 34.7061 cv
47.0605 34.6807 47.083 34.6616 47.1084 34.6636 cv
47.207 34.668 li
47.208 34.6675 47.209 34.666 47.21 34.666 cv
47.2119 34.666 47.2124 34.668 47.2144 34.668 cv
47.4272 34.6772 li
47.4526 34.6792 47.4697 34.6855 47.4678 34.7109 cv
47.4658 34.7363 47.4478 34.7383 47.4224 34.7363 cv
47.291 34.7441 li
47.2935 34.7533 47.3003 34.7598 47.3003 34.7695 cv
47.3003 34.8266 47.2598 34.873 47.21 34.873 cv
47.1606 34.873 47.1201 34.8266 47.1201 34.7695 cv
47.1201 34.7632 47.125 34.7598 47.126 34.7533 cv
47.1016 34.7549 li
cp
48.7344 40.5625 mo
48.7344 41.1938 li
47.2163 41.1938 li
47.2163 38.6855 li
48.7344 40.5625 li
cp
48.4199 37.5068 mo
50.3237 37.5068 li
50.3237 39.3496 li
49.9102 39.3496 li
48.4199 37.5068 li
cp
48.7344 41.4395 mo
48.7344 41.604 li
48.7344 41.7764 48.7607 41.9424 48.8091 42.0991 cv
47.5732 42.0991 li
47.5732 42.2378 li
47.8667 42.2559 48.1094 42.2729 48.1094 42.5908 cv
48.1094 43.3306 li
48.1094 43.6772 48.1904 43.8892 48.3843 44.0155 cv
48.5679 44.1372 48.8096 44.1729 49.0366 44.1729 cv
49.2925 44.1729 49.5527 44.0928 49.7139 43.9507 cv
49.915 43.7773 49.9814 43.5332 49.9814 43.248 cv
49.9814 43.3618 li
49.9814 43.3115 49.9819 43.2685 49.9829 43.2256 cv
50.0923 43.2549 50.2065 43.271 50.3237 43.2773 cv
50.3237 45.1235 li
48.6025 45.0747 47.2163 43.663 47.2163 41.9302 cv
47.2163 41.4395 li
48.7344 41.4395 li
cp
48.8672 42.2583 mo
49.043 42.6733 49.3823 43.002 49.8027 43.167 cv
49.8032 43.189 49.8037 43.2099 49.8042 43.2338 cv
49.7988 43.7358 49.5801 44.0005 49.1426 44.0005 cv
48.7104 44.0005 48.52 43.7393 48.52 43.2715 cv
48.52 42.5908 li
48.52 42.3579 48.6768 42.2871 48.8672 42.2583 cv
cp
46.4414 30.8843 mo
46.4736 30.751 46.48 30.6602 46.48 30.6602 cv
46.7065 30.8056 li
46.7065 30.8056 46.6104 32.1514 45.313 32.0791 cv
45.0005 32.062 44.7451 31.9502 44.5347 31.7866 cv
44.6958 31.8691 44.8789 31.9219 45.0864 31.9336 cv
46.0469 31.9868 46.3491 31.2637 46.4414 30.8843 cv
cp
43.7666 29.9678 mo
44.0674 29.667 44.5557 29.667 44.8569 29.9678 cv
44.8755 29.9858 44.8887 30.0068 44.9043 30.0259 cv
44.6157 29.98 44.3096 30.0658 44.0869 30.2886 cv
43.8643 30.5112 43.7783 30.8169 43.8247 31.1059 cv
43.8052 31.0898 43.7847 31.0766 43.7666 31.0586 cv
43.4653 30.7578 43.4653 30.269 43.7666 29.9678 cv
cp
42.4121 29.6738 mo
42.1895 29.8965 42.104 30.2026 42.1499 30.4917 cv
42.1304 30.4756 42.1099 30.4624 42.0918 30.4443 cv
41.7905 30.1431 41.7905 29.6547 42.0918 29.3535 cv
42.3931 29.0522 42.8813 29.0522 43.1826 29.3535 cv
43.2007 29.3716 43.2139 29.3921 43.23 29.4116 cv
42.9409 29.3652 42.6348 29.4512 42.4121 29.6738 cv
cp
43.2344 30.9014 mo
43.563 31.0488 44.0229 31.502 43.981 32.8882 cv
43.9712 33.1997 43.9697 33.3364 43.9707 33.4296 cv
44.0552 33.4502 li
47.1797 33.4502 li
50.3237 33.4502 li
50.3237 37.2607 li
49.6011 37.2607 li
49.6353 37.1499 49.6377 37.0195 49.6025 36.8677 cv
49.5444 36.6191 49.2881 36.271 49.082 35.9912 cv
49.0215 35.9092 48.9644 35.8315 48.9233 35.7705 cv
48.8081 35.6011 48.6641 35.2686 48.7661 35.0981 cv
48.8125 35.0199 48.9077 34.9653 49.021 34.9634 cv
49.1206 34.9619 49.2349 34.9795 49.2349 34.9795 cv
48.9893 35.6094 49.6499 36.2153 49.957 36.1933 cv
49.6958 35.5171 50.1426 35.46 49.9727 35.0103 cv
49.8247 34.62 49.4653 34.5342 49.2505 34.7798 cv
49.2505 34.7798 48.8511 34.5952 48.5859 34.9906 cv
48.3623 35.3242 48.7344 35.8657 48.7495 35.8882 cv
48.793 35.9521 48.8516 36.0317 48.9131 36.1156 cv
49.0977 36.3657 49.3501 36.7085 49.3979 36.9155 cv
49.4321 37.0625 49.4238 37.1768 49.3774 37.2607 cv
48.6221 37.2607 li
48.4233 37.1055 48.1191 36.8891 47.8716 36.8066 cv
47.7036 36.751 47.6851 36.5864 47.8086 36.6113 cv
47.9136 36.6318 48.4307 36.709 48.5981 36.4013 cv
48.5981 36.4013 47.7803 36.3794 47.7803 35.8388 cv
47.7803 35.8388 48.0322 36.0591 48.3047 35.8916 cv
48.3047 35.8916 47.9863 35.5928 48.0874 35.2886 cv
48.1226 35.1841 48.2852 34.8374 48.1563 34.7466 cv
48.104 34.7104 48.2715 34.5791 48.3711 34.5898 cv
48.3711 34.5898 48.1382 34.3671 47.9204 34.5845 cv
47.894 34.6104 47.8203 34.6021 47.7734 34.5898 cv
47.6743 34.5635 47.3721 34.458 47.2549 34.4795 cv
47.1973 34.4902 47.0923 34.4951 46.9297 34.6997 cv
46.9297 34.6997 46.9028 34.7226 46.7412 34.7363 cv
46.6782 34.7417 46.6987 34.8398 46.7095 34.9619 cv
46.7148 35.0195 46.8516 35.0645 47.1919 35.2134 cv
47.2759 35.25 47.228 35.3447 47.1709 35.355 cv
47.1133 35.3652 46.8462 35.3184 46.7778 35.3496 cv
46.7202 35.376 46.6914 35.4946 46.7461 35.5801 cv
46.7832 35.6377 46.9399 35.6089 46.9717 35.6117 cv
47.0347 35.6172 47.2627 35.8018 47.0581 35.9956 cv
46.7817 36.2568 46.5513 36.2412 46.29 36.103 cv
45.1426 35.2865 li
45.1426 35.2865 45.2266 34.7837 44.8491 34.5952 cv
44.8491 34.5952 44.96 34.8505 44.9072 34.9663 cv
44.9072 34.9663 44.7021 34.7417 44.5239 34.7417 cv
44.5239 34.7417 44.7485 35.0215 44.7383 35.0737 cv
44.7383 35.0737 44.4189 34.9829 44.3354 35.0562 cv
44.3354 35.0562 44.6919 35.2129 44.6919 35.3076 cv
44.6919 35.3916 44.4404 35.4126 44.3252 35.3813 cv
44.3252 35.3813 44.3774 35.6328 44.7969 35.5908 cv
44.7969 35.5908 45.3774 36.2212 45.9292 36.5796 cv
45.9844 36.6157 46.0137 36.6602 46.0259 36.7074 cv
45.8008 36.913 45.394 36.9072 45.394 36.9072 cv
45.5703 37.0835 45.8833 37.0186 45.9688 37.0503 cv
45.8569 37.1641 45.2451 37.7533 45.1426 37.9077 cv
45.0586 38.0332 45.0078 37.9277 44.9746 37.8657 cv
44.8804 37.687 44.4927 37.6665 44.3354 37.9492 cv
44.3354 37.9492 44.6343 37.9404 44.7075 37.9927 cv
44.7075 37.9927 44.3252 38.1274 44.4189 38.3687 cv
44.4189 38.3687 44.6216 38.2026 44.7998 38.1924 cv
44.7998 38.1924 44.6289 38.5469 44.8384 38.6411 cv
44.8384 38.6411 44.8809 38.3262 45.0898 38.3374 cv
45.2891 38.3477 45.2891 38.5366 45.2891 38.5889 cv
45.2891 38.5889 45.415 38.5156 45.415 38.2534 cv
45.415 38.1274 45.4956 38.0972 45.541 38.0854 cv
45.583 38.0752 45.9058 37.8696 46.4897 37.2554 cv
46.4897 37.2554 46.7007 37.3833 46.9707 37.4917 cv
46.9707 37.9834 li
46.833 38.0894 46.6787 38.2466 46.5205 38.4844 cv
46.4575 38.5786 46.4248 38.6685 46.1211 38.6685 cv
46.1211 38.6685 46.2671 38.9976 46.5166 38.9551 cv
46.5166 38.9551 46.0684 39.1748 45.8311 39.3784 cv
45.7329 39.4624 45.686 39.4111 45.6143 39.3573 cv
45.5303 39.2944 45.188 39.0571 45.041 39.4902 cv
45.041 39.4902 45.2021 39.3926 45.2998 39.4624 cv
45.2998 39.4624 45.0483 39.6997 45.104 39.9653 cv
45.104 39.9653 45.3032 39.7026 45.4448 39.7593 cv
45.5146 39.7871 45.293 40.0562 45.5371 40.1611 cv
45.5371 40.1611 45.4897 39.7676 45.7832 39.7749 cv
45.7832 39.7749 45.7607 40.0562 46.0127 40.0981 cv
46.0127 40.0981 45.8408 39.6504 46.1055 39.5752 cv
46.1494 39.5625 46.5879 39.5298 46.9707 39.4028 cv
46.9707 41.1938 li
43.7505 41.1938 li
43.7505 33.4502 li
43.7476 33.4296 li
43.7432 33.375 43.7402 33.2129 43.7544 32.7422 cv
43.7876 31.6572 43.5127 31.144 43.2344 30.9014 cv
cp
43.7505 42.543 mo
43.7505 41.4395 li
46.9707 41.4395 li
46.9707 41.9302 li
46.9707 42.5703 47.1494 43.168 47.4551 43.6812 cv
43.8516 43.6812 li
43.7876 43.311 43.7505 42.9316 43.7505 42.543 cv
cp
44.9932 46.4067 mo
50.3237 46.4067 li
50.3237 49.1826 li
49.4966 49.1743 48.7075 49.0112 47.979 48.7265 cv
48.9487 49.2808 50.0703 49.5991 51.2671 49.5991 cv
52.1528 49.5991 52.9971 49.4248 53.7695 49.1099 cv
53.7637 52.4082 li
46.687 52.4082 li
46.6982 48.062 li
46.0356 47.6172 45.458 47.0552 44.9932 46.4067 cv
cp
55.606 53.854 mo
55.606 53.9111 55.6025 53.9585 55.5942 54 cv
45 54 li
44.9873 53.9585 44.98 53.9106 44.98 53.854 cv
44.98 53.4004 45.4639 52.9526 46.2744 52.6538 cv
54.3115 52.6538 li
55.1221 52.9526 55.606 53.4004 55.606 53.854 cv
cp
57.0322 42.543 mo
57.0322 44.7759 55.9297 46.7495 54.2402 47.9536 cv
54.2402 47.9546 li
53.1997 48.6963 51.936 49.1445 50.5693 49.1802 cv
50.5693 45.3682 li
51.1694 45.3408 51.729 45.1587 52.2114 44.8618 cv
52.6978 44.5625 53.104 44.147 53.3911 43.6528 cv
53.4023 43.6333 53.4126 43.6128 53.4233 43.5928 cv
53.6216 43.6045 53.9316 43.564 54.3843 43.3481 cv
55.0298 43.041 54.9375 43.2715 54.9375 43.2715 cv
54.9375 43.2715 54.4766 43.9473 54.1689 44.0552 cv
54.1689 44.0552 54.0156 44.0703 54.0771 44.1318 cv
54.0771 44.1318 54.2358 44.2505 54.3999 44.1318 cv
54.9375 43.7427 55.229 43.2969 55.229 43.2969 cv
55.229 43.2969 55.4443 43.7632 55.9663 43.7017 cv
55.8745 44.1011 li
55.8745 44.1011 55.7056 44.0396 55.6592 44.0703 cv
55.6133 44.1011 55.4717 44.1781 55.6133 44.1781 cv
55.7207 44.1781 55.9863 44.2417 56.0283 44.1167 cv
56.0435 44.0703 56.1973 43.6401 56.1973 43.4404 cv
56.1973 43.4404 55.7983 43.5977 55.7363 43.2871 cv
55.7207 43.2099 55.6748 43.1025 55.6748 43.1025 cv
55.6748 43.1025 55.6528 43.0249 55.5439 42.9487 cv
55.7852 42.8843 56.1514 42.7583 56.2524 42.5639 cv
56.2871 42.4966 56.3975 42.3617 56.3662 42.292 cv
56.3521 42.2607 56.2773 42.1401 56.208 42.1191 cv
56.0371 42.0674 55.6851 42.1318 55.4902 42.2533 cv
55.1333 42.4771 54.8936 42.3735 54.833 42.3266 cv
54.8066 42.3062 54.8008 42.2533 54.8159 42.1777 cv
54.8984 42.2163 55.0752 42.124 55.1519 42.0635 cv
55.2583 41.9805 55.2446 41.8271 55.1167 41.8276 cv
54.751 41.8286 54.728 42.0576 54.728 42.0576 cv
54.6709 42.2378 54.6821 42.3555 54.7622 42.418 cv
54.9155 42.5366 55.2837 42.519 55.5498 42.3525 cv
55.7451 42.23 56.0596 42.1943 56.1743 42.2295 cv
56.2085 42.2397 56.2104 42.3789 56.2124 42.3843 cv
56.23 42.4219 56.1689 42.4746 56.1499 42.5107 cv
56.0591 42.6855 55.6172 42.8169 55.3838 42.8691 cv
55.3008 42.8413 55.1958 42.8193 55.0601 42.8105 cv
54.8145 42.7954 54.333 42.8208 54.333 42.8208 cv
54.2422 42.8301 53.9756 42.8789 53.731 42.8491 cv
53.813 42.5566 53.8574 42.2489 53.8574 41.9302 cv
53.8574 41.4395 li
57.0322 41.4395 li
57.0322 42.543 li
cp
57.0322 41.1938 mo
53.8574 41.1938 li
53.8574 39.2969 li
54.0151 39.2168 54.1411 39.1142 54.1846 38.9771 cv
54.1846 38.9771 53.9854 38.8828 53.8599 38.8516 cv
53.8599 38.8516 54.541 38.3588 54.646 38.0127 cv
54.646 38.0127 54.7861 37.9761 54.7295 38.0547 cv
54.6772 38.1283 54.6973 38.2114 54.7705 38.9043 cv
54.7915 39.1035 54.6978 39.2866 54.5093 39.3808 cv
54.5093 39.3808 54.791 39.519 55.1802 39.1914 cv
55.1802 39.1914 55.4258 40.0312 54.625 40.0463 cv
54.415 40.0503 53.9961 40.0674 54.0068 40.5918 cv
54.0068 40.5918 54.2598 40.2964 54.417 40.3486 cv
54.417 40.3486 54.2266 40.5708 54.2896 40.728 cv
54.2896 40.728 54.5581 40.3681 54.6631 40.4102 cv
54.6631 40.4102 54.5098 40.6963 54.583 40.8013 cv
54.583 40.8013 54.7681 40.4458 54.8623 40.456 cv
54.957 40.4668 55.0337 40.6021 55.0127 40.7803 cv
55.0127 40.7803 55.293 40.7187 55.1489 40.4551 cv
55.0864 40.3398 55.0371 40.356 54.9917 40.2876 cv
54.9497 40.2246 56.3442 39.7109 56.166 38.6836 cv
56.166 38.6836 55.9429 38.8779 55.7778 38.7256 cv
55.6416 38.6001 55.5371 38.3774 55.8301 38.1362 cv
55.8301 38.1362 55.7075 38.0596 55.6416 37.8872 cv
55.6099 37.8037 55.605 37.7373 55.563 37.6431 cv
55.7148 37.646 55.9873 37.623 56.1509 37.4438 cv
56.2778 37.3052 56.3125 37.1079 56.2544 36.8579 cv
56.1968 36.6089 55.9404 36.2607 55.7344 35.9814 cv
55.6733 35.8988 55.6167 35.8218 55.5752 35.7607 cv
55.4604 35.5913 55.3164 35.2588 55.418 35.0884 cv
55.4648 35.0103 55.5601 34.9555 55.6733 34.9536 cv
55.7729 34.9521 55.8872 34.9697 55.8872 34.9697 cv
55.6411 35.5996 56.3022 36.2056 56.6094 36.1836 cv
56.3481 35.5073 56.7949 35.4502 56.6245 35.0005 cv
56.4766 34.6104 56.1177 34.5244 55.9023 34.77 cv
55.9023 34.77 55.5029 34.5859 55.2378 34.981 cv
55.0146 35.3145 55.3867 35.856 55.4019 35.8783 cv
55.4453 35.9424 55.5039 36.022 55.5654 36.1054 cv
55.7495 36.3559 56.002 36.6987 56.0503 36.9053 cv
56.0918 37.084 56.0737 37.2173 55.9966 37.3022 cv
55.8706 37.4399 55.5957 37.438 55.4883 37.4258 cv
55.4883 37.4258 54.9263 36.9312 54.5234 36.7969 cv
54.356 36.7412 54.0718 36.4013 54.1177 36.1401 cv
54.1797 36.002 li
54.2407 36.0937 54.5791 36.0327 54.5791 36.0327 cv
54.4253 35.9712 54.3945 35.6333 54.3945 35.6333 cv
54.5176 35.4487 54.4868 35.0034 54.4868 35.0034 cv
53.4727 34.7881 li
53.2271 34.834 53.4111 35.2954 53.2271 35.418 cv
53.0425 35.541 52.8579 35.541 52.8579 35.541 cv
52.981 35.7251 53.2578 35.7866 53.2578 35.7866 cv
53.1963 36.1553 52.9658 36.0786 52.7046 35.9404 cv
51.7949 35.2773 li
51.7949 35.2773 51.8784 34.7738 51.501 34.5849 cv
51.501 34.5849 51.6118 34.8413 51.5596 34.9561 cv
51.5596 34.9561 51.3545 34.7319 51.1763 34.7319 cv
51.1763 34.7319 51.4009 35.0112 51.3906 35.0639 cv
51.3906 35.0639 51.0713 34.9727 50.9873 35.0464 cv
50.9873 35.0464 51.3438 35.203 51.3438 35.2979 cv
51.3438 35.3818 51.0923 35.4028 50.9771 35.3716 cv
50.9771 35.3716 51.0293 35.623 51.4487 35.581 cv
51.4487 35.581 52.0298 36.2114 52.5811 36.5697 cv
52.6367 36.606 52.666 36.6504 52.6782 36.6978 cv
52.4531 36.9033 52.0459 36.897 52.0459 36.897 cv
52.2227 37.0737 52.3643 37.1479 52.4497 37.1802 cv
52.4312 37.1987 52.4038 37.2266 52.3706 37.2607 cv
50.5693 37.2607 li
50.5693 33.4502 li
57.0322 33.4502 li
57.0322 41.1938 li
cp
57.6831 29.6738 mo
57.4604 29.8965 57.3745 30.2026 57.4209 30.4917 cv
57.4014 30.4756 57.3809 30.4624 57.3628 30.4443 cv
57.0615 30.1431 57.0615 29.6547 57.3628 29.3535 cv
57.6636 29.0522 58.1523 29.0522 58.4536 29.3535 cv
58.4717 29.3716 58.4849 29.3921 58.501 29.4116 cv
58.2119 29.3652 57.9058 29.4512 57.6831 29.6738 cv
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
